!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t(require("jQuery"),require("ko")):"function"==typeof define&&define.amd?define("blockpy",["jQuery","ko"],t):"object"==typeof exports?exports.blockpy=t(require("jQuery"),require("ko")):e.blockpy=t(e.jQuery,e.ko)}("undefined"!=typeof self?self:this,(function(e,t){return function(e){var t={};function n(i){if(t[i])return t[i].exports;var o=t[i]={i:i,l:!1,exports:{}};return e[i].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(i,o,function(t){return e[t]}.bind(null,o));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=19)}([function(e,t,n){"use strict";(function(e){n.d(t,"b",(function(){return s})),n.d(t,"a",(function(){return r}));var i=n(11),o=n(8),s={READY:"ready",ACTIVE:"active",RETRYING:"retrying",FAILED:"failed",OFFLINE:"offline"};function r(e){this.main=e,this.urls=e.model.configuration.urls,this.storage=new i.a("BLOCKPY"),this.queue={logEvent:JSON.parse(this.storage.getDefault("logEvent","[]")),updateSubmission:JSON.parse(this.storage.getDefault("updateSubmission","[]"))},this.MAX_QUEUE_SIZE={logEvent:200,updateSubmission:50},this.TIMER_DELAY=1e3,this.FAIL_DELAY=2e3,this.timers={},this.overlay=null,this.blockingAttempts=0,this.cachedFilenames=[],this.createSubscriptions(),this.checkCaches()}r.prototype.checkIP=function(e){if(e.success)if(this.storage.has("IP")){var t=this.storage.get("IP");if(t!==e.ip){var n=JSON.stringify({old:t,new:e.ip});this.logEvent("X-IP.Change",void 0,void 0,n),this.storage.set("IP",e.ip)}}else this.storage.set("IP",e.ip)},r.prototype.checkCaches=function(){var e=this;if(this.storage.has("saveAssignment")){var t=JSON.parse(this.storage.get("saveAssignment"));this._postLatestRetry(t,"assignment","saveAssignment",this.TIMER_DELAY)}this.cachedFilenames.forEach((function(t){if(e.storage.has("saveFile"+t)){var n=JSON.parse(e.storage.get("saveFile"+t));e._postLatestRetry(n,t,"saveFile",e.TIMER_DELAY)}}));var n=this;Object.keys(this.queue).forEach((function(e){!function t(i){if(i.success&&n.queue[e].length){var o=JSON.parse(n.queue[e].pop());n.urls[e];n._postRetry(o,e,1e3,t)}}({success:!0})}))},r.prototype.createFileSubscription=function(e,t){var n=this;e.subscribe((function(e){return!!n.main.model.display.autoSave()&&n.saveFile(t,e)}),this),this.cachedFilenames.push(t)},r.prototype.createSubscriptions=function(){var e=this.main.model;this.createFileSubscription(e.submission.code,"answer.py"),this.createFileSubscription(e.assignment.onRun,"!on_run.py"),this.createFileSubscription(e.assignment.onEval,"!on_eval.py"),this.createFileSubscription(e.assignment.onChange,"!on_change.py"),this.createFileSubscription(e.assignment.instructions,"!instructions.md"),this.createFileSubscription(e.assignment.startingCode,"^starting_code.py"),this.createFileSubscription(e.ui.files.extraStudentFiles,"#extra_student_files.blockpy"),this.createFileSubscription(e.ui.files.extraStartingFiles,"#extra_starting_files.blockpy"),this.createFileSubscription(e.ui.files.extraInstructorFiles,"#extra_instructor_files.blockpy")},r.prototype.createEventLogs=function(){var e=this;window.onblur=function(){e.logEvent("Session.End",void 0,void 0,void 0)},window.onfocus=function(){e.logEvent("Session.Start",void 0,void 0,void 0)}},r.prototype.finalizeSubscriptions=function(){},r.prototype.createServerData=function(){var e=this.main.model.assignment,t=this.main.model.user,n=this.main.model.submission,i=this.main.model.display,o=new Date,s=o.getTime();return{assignment_id:e.id(),assignment_group_id:t.groupId(),course_id:t.courseId(),submission_id:n.id(),user_id:t.id(),version:e.version(),timestamp:s,timezone:o.getTimezoneOffset(),passcode:i.passcode()}},r.prototype.setStatus=function(e,t,n){this.main.model.status[e](t),this.main.model.status[e+"Message"](n||"")},r.prototype.showOverlay=function(t){switch(this.blockingAttempts+=1,document.getElementsByClassName("blockpy-overlay").length||(this.overlay=e('<div class="blockpy-overlay"> </div>'),this.overlay.appendTo(document.body)),t){case 0:this.overlay.css("background-color","#988");break;case 1:this.overlay.css("background-color","#655");break;case 2:this.overlay.css("background-color","#333");break;default:this.overlay.css("background-color","black")}},r.prototype.hideOverlay=function(){this.blockingAttempts-=1,this.blockingAttempts<=0&&this.overlay.remove()},r.prototype._enqueueData=function(e,t){var n=this.queue[e].length,i=this.MAX_QUEUE_SIZE[e];n>i&&(this.queue[e]=this.queue[e].slice(n-i,i));var o=JSON.stringify(t);-1===this.queue[e].indexOf(o)&&(this.queue[e].push(o),this.storage.set(e,JSON.stringify(this.queue[e])))},r.prototype._dequeueData=function(e,t){var n=JSON.stringify(t),i=this.queue[e].indexOf(n);i>=0&&(this.queue[e].splice(i),this.storage.set(e,JSON.stringify(this.queue[e])))},r.prototype._postRetry=function(t,n,i,o){var r=this,a=function(){r._enqueueData(n,t),e.post(r.urls[n],t).done((function(e){r._dequeueData(n,t),e.success?r.setStatus(n,s.READY):(console.error(e),r.setStatus(n,s.FAILED,e.message)),o&&o(e),e.success&&r.checkIP(e.ip)})).fail((function(e,a){r.setStatus(n,s.RETRYING,a.toString()),r._postRetry(t,n,i+r.FAIL_DELAY,o)}))};null===i?a():setTimeout(a,i)},r.prototype._postLatestRetry=function(t,n,i,o){var r=this,a=i+n,l=function(){r.storage.set(a,JSON.stringify(t));var l=r.storage.getTime(a);e.post(r.urls[i],t).done((function(e){if(e.success){r.checkIP(e);var t=r.storage.getTime(a);l>=t&&r.storage.remove(a),r.setStatus(i,s.READY)}else if(r.setStatus(i,s.FAILED,e.message),!1===e.success){var n=r.storage.getTime(a);l>=n&&r.storage.remove(a)}})).fail((function(e,c){r.setStatus(i,s.RETRYING,c.toString());var u=r.storage.getTime(a);l>=u&&r._postLatestRetry(t,n,i,o+r.FAIL_DELAY)}))};clearTimeout(this.timers[a]),null===o?l():this.timers[a]=setTimeout(l,o)},r.prototype._postBlocking=function(t,n,i,o,r){var a=this;this.showOverlay(i),e.post(this.urls[t],n).done((function(e){a.hideOverlay(),a.setStatus(t,s.READY),o(e),a.checkIP(e)})).fail((function(e,l,c){i<=0?(a.hideOverlay(),a.setStatus(t,s.FAILED,l.toString()),r&&r(e,l,c)):setTimeout((function(){a.hideOverlay(),a.setStatus(t,s.RETRYING,l.toString()),a._postBlocking(t,n,i-1,o,r)}),a.FAIL_DELAY)}))},r.prototype.loadAssignment=function(e){var t=this;if(this.main.model.ui.server.isEndpointConnected("loadAssignment")){var n=this.createServerData();n.assignment_id=e,this._postBlocking("loadAssignment",n,4,(function(e){e.success?t.main.loadAssignmentData_(e):(t.setStatus("loadAssignment",s.FAILED,e.message),t.main.components.dialog.ERROR_LOADING_ASSIGNMNENT(e.message))}),(function(e,n,i){t.main.components.dialog.ERROR_LOADING_ASSIGNMNENT(n),console.error(e,n,i)}))}else this.setStatus("loadAssignment",s.OFFLINE)},r.prototype.saveAssignment=function(){var e=this,t=this.main.model;if(t.ui.server.isEndpointConnected("saveAssignment")){var n=this.createServerData();n.hidden=t.assignment.hidden(),n.reviewed=t.assignment.reviewed(),n.public=t.assignment.public(),n.url=t.assignment.url(),n.ip_ranges=t.assignment.ipRanges(),n.name=t.assignment.name(),n.settings=Object(o.d)(t),this._postBlocking("saveAssignment",n,3,(function(){return 0}),(function(t,n,i){e.main.components.dialog.ERROR_SAVING_ASSIGNMNENT(),console.error(t,n,i)}))}else this.setStatus("saveAssignment",s.OFFLINE,"Server is not connected! (Save Assignment)")},r.prototype.loadHistory=function(e){var t=this;if(this.main.model.ui.server.isEndpointConnected("loadHistory")){this.main.model;var n=this.createServerData();this._postBlocking("loadHistory",n,2,e,(function(e,n,i){t.main.components.dialog.ERROR_LOADING_HISTORY(),console.error(e,n,i)}))}},r.prototype.logEvent=function(e,t,n,i,o){if(this.main.model.ui.server.isEndpointConnected("logEvent")){var r=this.createServerData();r.event_type=e,r.category=t,r.label=n,r.message=i,r.file_path=o,this.setStatus("logEvent",s.ACTIVE),this._postRetry(r,"logEvent",0,(function(){}))}else this.setStatus("logEvent",s.OFFLINE)},r.prototype.saveImage=function(e,t){if(this.main.model.ui.server.isEndpointConnected("saveImage")){var n=this.createServerData();n.directory=e,n.image=t,this.setStatus("saveImage",s.ACTIVE),this._postLatestRetry(n,"turtle_output","saveImage",0)}else this.setStatus("saveImage",s.OFFLINE)},r.prototype.updateSubmissionStatus=function(e){var t=this;if(this.main.model.ui.server.isEndpointConnected("updateSubmissionStatus")){var n=this.createServerData();n.status=e;this._postBlocking("updateSubmissionStatus",n,2,(function(n){n.success&&t.main.model.submission.submissionStatus(e)}),(function(e,n,i){t.main.components.dialog.ERROR_UPDATING_SUBMISSION_STATUS(),console.error(e,n,i)}))}},r.prototype.loadFile=function(e,t,n,i){var o=this.main.model,r=this;if(o.ui.server.isEndpointConnected("load_file")){var a=this.createServerData();a.filename=e,a.type=t,this._postBlocking(this.urls.load_file,a,5,(function(e){e.success?n(e.data):(i(e.message),r.setStatus("loadFile",s.FAILED,e.message))}),(function(e,t,n){i("Server failure! Report to instructor"),console.error(n)}))}else i("No file server available."),this.setStatus("loadFile",s.OFFLINE,"Server is not connected! (Load File)")},r.prototype.saveFile=function(e,t,n){if(void 0===n&&(n=this.TIMER_DELAY),this.main.model.ui.server.isEndpointConnected("saveFile")){var i=this.createServerData();i.filename=e,i.code=t,this.setStatus("saveFile",s.ACTIVE),this._postLatestRetry(i,e,"saveFile",n)}else this.setStatus("saveFile",s.OFFLINE)},r.prototype.updateSubmission=function(e,t,n,i){var o=this,r=this.main.model.configuration.callbacks.success;if(this.main.model.ui.server.isEndpointConnected("updateSubmission")){var a=this.createServerData();a.score=e,a.correct=t,a.hidden_override=n,a.force_update=i,this.main.components.pythonEditor.bm.blockEditor.getPngFromBlocks((function(e,i){a.image=e,i.remove&&i.remove(),o._postRetry(a,"updateSubmission",0,(function(e){e.success?o.setStatus("updateSubmission",s.READY):o.setStatus("updateSubmission",s.FAILED,e.message),!n&&t&&r&&r(a.assignment_id)}))}))}}}).call(this,n(5))},function(e,t,n){"use strict";function i(e){return e.replace(/^(?=.)/gm,"    ")}function o(e){return e.replace(/\s/g,"_").toLowerCase()}function s(e){return"string"!=typeof e?"":e.charAt(0).toUpperCase()+e.slice(1)}function r(e,t){return Math.floor(Math.random()*(t-e+1)+e)}function a(e){return e.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&apos;")}function l(){for(var e=0;e<arguments.length;e++)if(null!=arguments[e])return arguments[e]}n.d(t,"d",(function(){return i})),n.d(t,"e",(function(){return o})),n.d(t,"a",(function(){return s})),n.d(t,"b",(function(){return a})),n.d(t,"c",(function(){return l})),"undefined"!=typeof Blockly&&(Blockly.WorkspaceSvg.prototype.shuffle=function(){for(var e=this.getMetrics(),t=e.viewWidth/2,n=e.viewHeight,i=this.getTopBlocks(!1),o=5,s=0,a=n/i.length,l=0;l<i.length;l++){var c=i[l],u=c.getRelativeToSurfaceXY();s=0==l?5:-u.x+r(10,t),c.moveBy(s,-u.y+o),o+=r(5,a)}})},function(e,t,n){"use strict";n.d(t,"d",(function(){return s})),n.d(t,"c",(function(){return r})),n.d(t,"b",(function(){return a})),n.d(t,"a",(function(){return l}));var i=n(7);function o(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function s(e,t){var n=new FileReader,i=t.target.files;n.onload=function(t){return e.ui.editors.current().uploadFile(t)},n.fileName=i[0].name,n.readAsText(i[0]),t.target.value=""}function r(e){return e.replace(/[^a-z0-9]/gi,"_").toLowerCase()}function a(e,t){var n=e.ui.editors.current().downloadFile(),i=n.name,o=n.extension,s=n.contents,a=n.mimetype;i=r(i),i+=o;var l=new Blob([s],{type:a});if(window.navigator.msSaveOrOpenBlob)window.navigator.msSaveBlob(l,i);else{var c=window.document.createElement("a");c.href=window.URL.createObjectURL(l),c.download=i,document.body.appendChild(c),c.click(),document.body.removeChild(c)}}var l=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.main=t,this.tag=n,this.fileSystem=t.components.fileSystem,this.filename=null,this.file=null}var t,n,s;return t=e,(n=[{key:"deleteFile",value:function(){this.fileSystem.deleteFile(this.filename),this.main.model.display.filename("answer.py"),this.main.components.editors.changeEditor("answer.py")}},{key:"onFileDeleted",value:function(){this.main.model.display.filename("answer.py"),this.main.components.editors.changeEditor("answer.py")}},{key:"onFileUpdated",value:function(e){e.filename===this.filename&&this.main.components.editors.changeEditor(this.filename)}},{key:"trackCurrentFile",value:function(){this.fileSystem.watchFile(this.filename,{updated:this.onFileUpdated.bind(this),deleted:this.onFileDeleted.bind(this)})}},{key:"enter",value:function(e,t){this.filename=e,this.file=this.fileSystem.getFile(e),this.trackCurrentFile()}},{key:"exit",value:function(e,t,n){this.fileSystem.stopWatchingFile(this.filename),this.file=null,this.filename=null}},{key:"uploadFile",value:function(e){e.target.fileName;var t=e.target.result;this.file.handle(t)}},{key:"downloadFile",value:function(){var e=i.b.parseFilename(this.filename);return{name:e.name,extension:e.type,contents:this.file.handle(),mimetype:"text/plain"}}}])&&o(t.prototype,n),s&&o(t,s),e}()},function(e,t,n){"use strict";(function(e,i){n.d(t,"b",(function(){return l})),n.d(t,"c",(function(){return p})),n.d(t,"d",(function(){return m})),n.d(t,"f",(function(){return b})),n.d(t,"e",(function(){return v})),n.d(t,"g",(function(){return g})),n.d(t,"a",(function(){return k}));var o=n(1);function s(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var a=function(e,t,n,i){void 0===t&&(t=e);var o="",s="true";return i||(o="blockpy-file-instructor",s="display.instructor()"),'\n    <li class="nav-item '.concat(o,'">\n        <a class="nav-link" href="#"\n            data-toggle="tab"\n            data-bind="css: {active: display.filename() === \'').concat(e,"'},\n                click: display.filename.bind($data, '").concat(e,"'),\n                visible: (!").concat(n," || ui.files.hasContents('").concat(e,"')) && ").concat(s,'">\n            ').concat(t,"</a>\n    </li>")},l='\n<div class="col-md-12 blockpy-panel blockpy-files"\n    data-bind="visible: ui.files.visible">\n<ul class="nav nav-tabs" role="tablist">\n\n    <li class="nav-item">\n        <strong>View: </strong>\n    </li>\n\n    '.concat(a("answer.py",void 0,void 0,!0),"\n    ").concat(a("!instructions.md","Instructions"),"\n    ").concat(a("!assignment_settings.blockpy","Settings"),"\n    ").concat(a("^starting_code.py","Starting Code"),"\n    ").concat(a("!on_run.py","On Run"),"\n    ").concat(a("!on_change.py","On Change",!0),"\n    ").concat(a("!on_eval.py","On Eval",!0),"\n    ").concat(a("!sample_submissions.blockpy","Sample Submissions",!0),"\n    ").concat(a("!tags.blockpy","Tags",!0),'\n    \n    \x3c!-- ko foreach: assignment.extraInstructorFiles --\x3e\n        <li class="nav-item"\n            data-bind="css: {\'blockpy-file-instructor\': !filename().startsWith(\'&\')},\n                       visible: filename().startsWith(\'&\') || $root.display.instructor() ">\n            <a class="nav-link" href="#"\n                data-toggle="tab"\n                data-bind="css: {active: $root.display.filename() === filename(),\n                                 uneditable: filename().startsWith(\'&\')},\n                            click: $root.display.filename.bind($data, filename()),\n                            text: $root.ui.files.displayFilename(filename())">\n            </a>        \n        </li>\n    \x3c!-- /ko --\x3e\n    \x3c!-- ko foreach: assignment.extraStartingFiles --\x3e\n        <li class="nav-item blockpy-file-instructor"\n            data-bind="visible: $root.display.instructor()">\n            <a class="nav-link" href="#"\n                data-toggle="tab"\n                data-bind="css: {active: $root.display.filename() === filename()},\n                            click: $root.display.filename.bind($data, filename()),\n                            text: filename">\n            </a>        \n        </li>\n    \x3c!-- /ko --\x3e\n    \n    \x3c!-- ko foreach: submission.extraFiles --\x3e\n        <li class="nav-item">\n            <a class="nav-link" href="#"\n                data-toggle="tab"\n                data-bind="css: {active: $root.display.filename() === filename()},\n                            click: $root.display.filename.bind($data, filename()),\n                            text: $root.ui.files.displayFilename(filename())">\n            </a>        \n        </li>\n    \x3c!-- /ko --\x3e\n  \n    <li class="nav-item dropdown">\n        <a class="nav-link dropdown-toggle" href="#" data-toggle="dropdown"\n         role="button" aria-haspopup="true" aria-expanded="false">Add New</a>\n        <div class="dropdown-menu dropdown-menu-right">\n            <a class="dropdown-item blockpy-file-instructor" href="#"\n                data-bind="hidden: ui.files.hasContents(\'?mock_urls.blockpy\'),\n                           click: ui.files.add.bind($data, \'?mock_urls.blockpy\')">URL Data</a>\n            <a class="dropdown-item blockpy-file-instructor" href="#"\n                data-bind="hidden: ui.files.hasContents(\'?tags.blockpy\')">Tags</a>\n            <a class="dropdown-item blockpy-file-instructor" href="#"\n                data-bind="hidden: ui.files.hasContents(\'?sample_submissions.blockpy\')">Sample Submissions</a>\n            <div class="dropdown-divider"></div>\n            <a class="dropdown-item blockpy-file-instructor" href="#"\n                data-bind="hidden: assignment.onChange,\n                           click: ui.files.add.bind($data, \'!on_change.py\')">On Change</a>\n            <a class="dropdown-item blockpy-file-instructor" href="#"\n                data-bind="hidden: assignment.onEval,\n                           click: ui.files.add.bind($data, \'!on_eval.py\')">On Eval</a>\n            <div class="dropdown-divider"></div>\n            <a class="dropdown-item blockpy-file-instructor" href="#"\n                data-bind="click: ui.files.add.bind($data, \'starting\')">Starting File</a>\n            <a class="dropdown-item blockpy-file-instructor" href="#"\n                data-bind="click: ui.files.add.bind($data, \'instructor\')">Instructor File</a>\n            <a class="dropdown-item" href="#"\n                data-bind="click: ui.files.add.bind($data, \'student\')">Student File</a>\n        </div>\n    </li>\n  \n</ul>\n</div>\n'),c="EVERYWHERE",u="START_WITH_INSTRUCTOR",d="ONLY_STUDENT_FILES",f=["!on_change.py","!on_eval.py"],p=["answer.py","!instructions.md","!assignment_settings.py","^starting_code.py","!on_run.py","$settings.blockpy"],m=["answer.py","!instructions.md","!assignment_settings.py","^starting_code.py","!on_run.py","$settings.blockpy","!on_change.py","!on_eval.py","?mock_urls.blockpy","!tags.blockpy","!sample_submissions.blockpy"],h=function e(t,n,i){r(this,e),this.main=t,this.filename=n,this.contents=i||"",this.owner=null,this.handle=null};function b(t,n){return{filename:e.observable(t),contents:e.observable(n||"")}}function y(e,t){return{filename:function(){return e},contents:function(){return t}}}function v(e,t){if(e){var n=JSON.parse(e),i=[];for(var o in n)n.hasOwnProperty(o)&&i.push(b(o,n[o]));t(i)}else t([])}function g(t){return e.pureComputed((function(){var e={};return t().forEach((function(t){return e[t.filename()]=t.contents()})),JSON.stringify(e)}))}var k=function(){function e(t){r(this,e),this.main=t,this.files_={},this.mountFiles(),this.watchModel(),this.watches_={},this.main.model.display.instructor.subscribe((function(e){i(".blockpy-file-instructor").toggle(e)}))}var t,n,a;return t=e,(n=[{key:"watchFile",value:function(e,t){e in this.watches_||(this.watches_[e]=[]),this.watches_[e].push(t)}},{key:"stopWatchingFile",value:function(e){delete this.watches_[e]}},{key:"watchModel",value:function(){var e=this,t=this;[this.main.model.submission.extraFiles,this.main.model.assignment.extraStartingFiles,this.main.model.assignment.extraInstructorFiles].forEach((function(n){return n.subscribe((function(e){e.forEach((function(e){var n=e.value;if("added"===e.status){var i=t.newFile(n.filename(),n.contents(),n.contents);t.notifyWatches(i)}else"deleted"===e.status&&t.deleteFileLocally_(n.filename)}))}),e,"arrayChange")}))}},{key:"observeFile_",value:function(e){"answer.py"===e.filename?e.handle=this.main.model.submission.code:"!on_run.py"===e.filename?e.handle=this.main.model.assignment.onRun:"!on_change.py"===e.filename?e.handle=this.main.model.assignment.onChange:"!on_eval.py"===e.filename?e.handle=this.main.model.assignment.onEval:"!instructions.md"===e.filename?e.handle=this.main.model.assignment.instructions:"^starting_code.py"===e.filename?e.handle=this.main.model.assignment.startingCode:"?mock_urls.blockpy"===e.filename?this.observeInArray_(e,this.main.model.assignment.extraInstructorFiles):"!tags.blockpy"===e.filename?e.handle=this.main.model.assignment.tags:"!assignment_settings.blockpy"===e.filename?e.handle=this.main.model.assignment.settings:"$settings.blockpy"===e.filename?e.handle=this.main.model.display:e.filename.startsWith("^")?this.observeInArray_(e,this.main.model.assignment.extraStartingFiles):e.filename.startsWith("!")||e.filename.startsWith("?")||e.filename.startsWith("&")?this.observeInArray_(e,this.main.model.assignment.extraInstructorFiles):this.observeInArray_(e,this.main.model.submission.extraFiles)}},{key:"observeInArray_",value:function(e,t){e.owner=t;for(var n=e.owner(),i=0;i<n.length;i++)n[i].filename()===e.filename&&(e.handle=n[i].contents);if(null===e.handle){var o=b(e.filename);e.handle=o.contents,t.push(o)}}},{key:"mountFiles",value:function(){this.newFile("answer.py"),this.newFile("^starting_code.py"),this.newFile("!on_run.py"),this.newFile("!instructions.md"),this.newFile("!assignment_settings.blockpy")}},{key:"dismountExtraFiles",value:function(){for(var e in this.files_)this.files_.hasOwnProperty(e)&&-1===p.indexOf(e)&&(delete this.files_[e],delete this.watches_[e])}},{key:"newFile",value:function(e,t,n){if(e in this.files_){var i=this.files_[e];return void 0===n?this.observeFile_(i):i.handle=n,i.handle(t||""),i}var o=new h(this.main,e);return this.files_[e]=o,void 0===n?this.observeFile_(o):o.handle=n,void 0!==t&&o.handle(t),o}},{key:"writeFile",value:function(e,t){t=t||"",this.files_[e].handle(t)}},{key:"readFile",value:function(e){return this.files_[e].handle()}},{key:"getFile",value:function(e){return this.files_[e]}},{key:"deleteFile",value:function(e){return-1!==f.indexOf(e)?(this.deleteFileLocally_(e).handle(null),!0):null!==this.files_[e].owner&&(this.files_[e].owner.remove((function(t){return t.filename===e}))||!1)}},{key:"deleteFileLocally_",value:function(e){var t=this.files_[e];return delete this.files_[e],e in this.watches_&&this.watches_[e].forEach((function(e){return e.deleted()})),t}},{key:"notifyWatches",value:function(e){e.filename in this.watches_&&this.watches_[e.filename].forEach((function(t){return t.updated(e)}))}},{key:"searchForFile",value:function(e,t){e.startsWith("./")&&(e=e.slice(2));var n=c;e.startsWith("_instructor/")&&(e=e.slice("_instructor/".length),n=u),e.startsWith("_student/")?(e=e.slice("_student/".length),n=d):t&&(n=d);var i=this.main.model.submission.extraFiles(),s=this.main.model.assignment.extraInstructorFiles(),r=this.main.model.assignment.extraStartingFiles(),a=this.searchForSpecialFiles_(e,n);if(void 0!==a)return a;var l=this.searchForFileInList_(i,e),f=this.searchForFileInList_(i,"*"+e),p=this.searchForFileInList_(s,"&"+e);if(n===d)return Object(o.c)(p,l,f);var m=this.searchForFileInList_(s,"!"+e),h=this.searchForFileInList_(s,"?"+e),b=this.searchForFileInList_(r,"^"+e);return n===u?Object(o.c)(m,h,b,p,l,f):n===c?Object(o.c)(p,l,f,m,h,b):void 0}},{key:"searchForFileInList_",value:function(e,t){for(var n=0;n<e.length;n++)if(e[n].filename()===t)return e[n]}},{key:"searchForSpecialFiles_",value:function(e,t){if(t===d)return"answer.py"===e?y("_instructor/answer.py",this.main.model.submission.code()):void 0;switch(e){case"answer.py":return y("_instructor/answer.py",this.main.model.submission.code());case"on_run.py":return y("_instructor/on_run.py",this.main.model.assignment.onRun());case"on_change.py":return y("_instructor/on_change.py",this.main.model.assignment.onChange());case"on_eval.py":return y("_instructor/on_eval.md",this.main.model.assignment.onEval());case"instructions.md":return y("_instructor/instructions.md",this.main.model.assignment.instructions());case"starting_code.py":return y("_instructor/starting_code.py",this.main.model.assignment.startingCode())}}},{key:"newFileDialog",value:function(e){var t=this,n=i('\n<form>\n<div class="form-group row">\n    \x3c!-- Filename --\x3e\n    <div class="col-sm-2 text-right">\n        <label for="blockpy-instructor-file-dialog-filename">Filename:</label>\n    </div>\n    <div class="col-sm-10">\n        <input type="text" class="form-control blockpy-instructor-file-dialog-filename"\n            id="blockpy-instructor-file-dialog-filename">    \n    </div>\n    \x3c!-- Filetype --\x3e\n    <div class="col-sm-2 text-right mt-2">\n        <label for="blockpy-instructor-file-dialog-filetype">Filetype: </label>\n    </div>\n    <div class="col-sm-10">\n        <span class="blockpy-instructor-file-dialog-filetype"\n            id="blockpy-instructor-file-dialog-filetype"></span>    \n    </div>\n    \x3c!-- Inaccessible to student? --\x3e\n    <div class="col-sm-2 text-right mt-2">\n        <label for="blockpy-instructor-file-dialog-namespace">Namespace: </label>\n    </div>\n    <div class="col-sm-4">\n        <select class="form-control blockpy-instructor-file-dialog-namespace"\n            id="blockpy-instructor-file-dialog-namespace">\n            <option value="!">Completely inaccessible</option>\n            <option value="?">Hidden from student, accessible programatically</option>\n            <option value="&">Visible to student, but not editable</option>\n        </select>\n    </div>\n</div>\n</form>\n'),o=n.find(".blockpy-instructor-file-dialog-filename"),s=n.find(".blockpy-instructor-file-dialog-filetype"),r=n.find(".blockpy-instructor-file-dialog-namespace"),a=/(?:\.([^.]+))?$/;o.on("input",(function(){var e=a.exec(o.val())[1];e=void 0===e?"No extension":e,s.text(e)}));var l=function(){var n="";"instructor"===e?n=r.val():"starting"===e&&(n="^"),o.val()&&(o=n+o.val(),t.newFile(o))};n.submit((function(e){e.preventDefault(),l(),t.main.components.dialog.close()})),this.main.components.dialog.confirm("Make New File",n,l,(function(){}),"Add")}}])&&s(t.prototype,n),a&&s(t,a),e}()}).call(this,n(16),n(5))},function(e,t,n){"use strict";n.d(t,"a",(function(){return c})),n.d(t,"b",(function(){return u})),n.d(t,"c",(function(){return d}));var i=n(9),o=n(13),s=n(14),r=n(3),a=n(7),l=n(15),c={FEEDBACK:"feedback",TRACE:"trace",NONE:"none"};function u(e,t){var n=null;t.ui.instructions.current.subscribe((function(){null!==n&&clearTimeout(n),n=setTimeout((function(){t.configuration.container.find(".blockpy-instructions pre code").map((function(e,t){window.hljs.highlightBlock(t)}))}),400)})),t.display.fullscreen.subscribe((function(n){e.components.server.logEvent("X-Display.Fullscreen.Request","","",n.toString(),""),n?t.configuration.container.parent()[0].requestFullscreen().catch((function(t){var n="Error attempting to enable full-screen mode: ".concat(t.message," (").concat(t.name,")");e.components.server.logEvent("X-Display.Fullscreen.Error","","",n,""),alert(n)})).then((function(){e.components.server.logEvent("X-Display.Fullscreen.Success","","","",""),t.display.fullscreen(!0),t.configuration.container.css("overflow-y","auto")})):document.exitFullscreen().then((function(){e.components.server.logEvent("X-Display.Fullscreen.Exit","","",n.toString(),""),t.display.fullscreen(!1)}))}))}function d(e){return"\n<div class='blockpy-content container-fluid'>\n\n    \x3c!-- Dialog --\x3e\n    ".concat(o.b,'\n    \n    \x3c!-- Hidden Capture Canvas --\x3e\n    <canvas id=\'capture-canvas\' class=\'d-none\' role="presentation" aria-hidden="true"></canvas>\n    \n    \x3c!-- Row 1: Header and Quick Menu --\x3e\n    <div class=\'row\' style="display:none;">\n         \n         \x3c!-- Description --\x3e\n         <div class=\'col-md-10 blockpy-panel blockpy-header\'\n               role=\'heading\' aria-label=\'Assignment Description\'>\n         \n            \x3c!-- Assignment Name --\x3e\n            <span role=\'heading\' aria-level=\'1\'\n                  class="blockpy-name">\n                <strong>BlockPy: </strong> \n                <span data-bind=\'text: assignment.name\'></span>\n            </span>\n            \n            \x3c!-- Reset Instructions Button --\x3e\n            <div class="blockpy-instructions-reset"\n                data-bind="visible: ui.instructions.isChanged">\n                <a class="float-right"\n                    data-bind="click: ui.instructions.reset"\n                    href="">\n                    Reset instructions</a>\n            </div>\n            \n            \x3c!-- Instructions --\x3e\n            <div class=\'blockpy-instructions\'\n                 data-bind="html: ui.instructions.current">\n            </div>\n        </div>\n        \n        <div class=\'col-md-2 blockpy-panel blockpy-quick-menu\'\n             role=\'menubar\' aria-label=\'Quick Menu\' title="Quick Menu">\n            \x3c!-- Get Shareable Link --\x3e\n            \x3c!--<button class="btn btn-outline-secondary btn-sm">\n                Get shareable link</button>--\x3e\n            <span data-bind="visible: ui.menu.isSubmitted">\n                Your submission is ready to be reviewed!</span>\n            <button class="btn btn-outline-secondary btn-sm"\n                data-bind="visible: ui.menu.canMarkSubmitted,\n                           text: ui.menu.textMarkSubmitted,\n                           click: ui.menu.clickMarkSubmitted"></button>\n            \x3c!-- View as instructor --\x3e\n            <div class="form-check"\n                 data-bind="visible: ui.role.isGrader">\n                <input class="form-check-input" type="checkbox" value="" id="blockpy-as-instructor"\n                    data-bind="checked: display.instructor">\n                <label class="form-check-label" for="blockpy-as-instructor">\n                    View as instructor\n                </label>\n            </div>\n            <button class="btn btn-outline-secondary btn-sm"\n                data-bind="click: ui.menu.clickFullscreen"\n                title="Full Screen"\n            ><span class=\'fas\',\n                           data-bind="class: ui.menu.textFullscreen"\n            ></span></button>\n            <button class="btn btn-outline-secondary btn-sm"\n                data-bind="click: ui.menu.editInputs, visible: ui.menu.showQueuedInputs" title="Edit Inputs"\n            ><span class=\'fas fa-list-alt\'></span></button>\n            <span class="blockpy-student-error fas fa-bug"></span>\n        </div>\n         \n    </div>\n    \n    \x3c!-- Row 2: Console and Feedback --\x3e\n    \x3c!-- ko if: ui.secondRow.isAllVisible --\x3e\n    <div class=\'row\'>\n    \n        \x3c!-- Console --\x3e\n        ').concat(l.b,"\n         \n        \x3c!-- Feedback --\x3e\n        \x3c!-- ko if: ui.secondRow.isFeedbackVisible --\x3e\n        ").concat(s.b,"\n        \x3c!-- /ko --\x3e\n        \n        \x3c!-- Trace --\x3e\n        \x3c!-- ko if: ui.secondRow.isTraceVisible --\x3e\n        ").concat(i.b,"\n        \x3c!-- /ko --\x3e\n         \n    </div>\n    \x3c!-- /ko --\x3e\n    \n    \x3c!-- Row 3: File Navigation --\x3e\n    \x3c!-- ko if: ui.files.visible --\x3e\n    <div class='row' style=\"display:none;\">\n        ").concat(r.b,'\n    </div>\n    \x3c!-- /ko --\x3e\n    \n    \x3c!-- Row 4: View Row --\x3e\n    <div class="row">\n        ').concat(a.a,'\n    </div>\n\n    \x3c!-- Row 5: Footer Row --\x3e    \n    <div class="row">\n        ').concat('\n<div class="col-md-12 blockpy-panel blockpy-status">\n    <div>\n        <span class="badge" data-bind="class: ui.server.status(\'loadAssignment\')">Load Assignment</span>, \n        <span class="badge" data-bind="class: ui.server.status(\'saveAssignment\')">Save Assignment</span>, \n        <span class="badge" data-bind="class: ui.server.status(\'loadFile\')">Load File</span>, \n        <span class="badge" data-bind="class: ui.server.status(\'saveFile\')">Save File</span>, \n        <span class="badge" data-bind="class: ui.server.status(\'loadDataset\')">Load Dataset</span>, \n        <span class="badge" data-bind="class: ui.server.status(\'logEvent\')">Log Event</span>, \n        <span class="badge" data-bind="class: ui.server.status(\'updateSubmission\'),\n                                        click: ui.server.force.updateSubmission">Update Submission</span>, \n        <span class="badge" data-bind="class: ui.server.status(\'onExecution\')">Execution</span>\n    </div>\n    <div\n        <span data-bind="text: ui.server.messages"></span>\n    </div>\n    <div>\n        <span>User: <span data-bind="text: user.id"></span> (<span data-bind="text: user.name"></span>, <span data-bind="text: user.role"></span>)</span>, \n        <span>Course: <span data-bind="text: user.courseId"></span></span>,\n        <span>Group: <span data-bind="text: user.groupId"></span></span>,\n        <span>Assignment: <span data-bind="text: assignment.id"></span></span>,\n        <span>Assignment Version: <span data-bind="text: assignment.version"></span></span>,\n        <span>Submission: <span data-bind="text: submission.id"></span></span>, \n        <span>Submission Version: <span data-bind="text: submission.version"></span></span>\n    </div>\n</div>\n',"\n    </div>\n    \n</div>\n    ")}},function(t,n){t.exports=e},function(e,t,n){"use strict";n.d(t,"a",(function(){return f})),n.d(t,"b",(function(){return h}));var i=n(2),o=n(12);function s(e){return(s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function r(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function a(e,t,n){return(a="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var i=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=d(e)););return e}(e,t);if(i){var o=Object.getOwnPropertyDescriptor(i,t);return o.get?o.get.call(n):o.value}})(e,t,n||e)}function l(e,t){return(l=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function c(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,i=d(e);if(t){var o=d(this).constructor;n=Reflect.construct(i,arguments,o)}else n=i.apply(this,arguments);return u(this,n)}}function u(e,t){if(t&&("object"===s(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function d(e){return(d=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var f={BLOCK:"block",SPLIT:"split",TEXT:"text"};function p(e,t,n){return'<label class="btn btn-outline-secondary blockpy-mode-set-blocks"\n                data-bind="css: {active: display.pythonMode() === \''.concat(n,"'},\n                           click: ui.editors.python.updateMode.bind($data, '").concat(n,"')\">\n                <span class='fas fa-").concat(t,'\'></span>\n                <input type="radio" name="blockpy-mode-set" autocomplete="off" checked> ').concat(e,"\n            </label>")}var m='\n\n    <div class="blockpy-python-toolbar col-md-12 btn-toolbar"\n         role="toolbar" aria-label="Python Toolbar">\n\n         <div class="btn-group mr-2" role="group" aria-label="Run Group">         \n            <button type="button" class="btn blockpy-run notransition"\n                data-bind="click: ui.execute.run,\n                            css: {\'blockpy-run-running\': ui.execute.isRunning}">\n                <span class="fas fa-play"></span> 运行 \n             </button>\n         </div>\n         \n         <div class="btn-group btn-group-toggle mr-2" data-toggle="buttons">\n            \x3c!-- ko if: $root.assignment.settings.enableBlocks() --\x3e\n            '.concat(p("积木","th-large",f.BLOCK),"\n            ").concat(p("分栏","columns",f.SPLIT),"\n            ").concat(p("文本","align-left",f.TEXT),'\n            \x3c!-- /ko --\x3e\n         </div>\n\n         <div class="btn-group mr-2" role="group" aria-label="Reset Group">\n             <button type="button" class="btn btn-outline-secondary"\n                 data-bind="click: ui.editors.reset">\n                 <span class="fas fa-sync"></span> 重置 \n              </button>\n         </div>\n         \n         \x3c!-- ko if: !assignment.settings.hideImportDatasetsButton() --\x3e\n         <div class="btn-group mr-2" role="group" aria-label="Import Group">\n            <button type="button" class="btn btn-outline-secondary"\n                data-bind="click: ui.editors.importDataset">\n                <span class="fas fa-cloud-download-alt"></span> 导入数据集 \n             </button>\n         </div>\n         \x3c!-- /ko --\x3e\n         \n         <div class="btn-group mr-2">\n                <label class="btn btn-outline-secondary">\n                    <span class="fas fa-file-upload"></span> 上传 \n                    <input class="blockpy-toolbar-upload" type="file"\n                        hidden\n                        data-bind="event: {change: ui.editors.upload}">\n                 </label>\n\n                <button type="button" class="btn btn-outline-secondary dropdown-toggle dropdown-toggle-split"\n                    data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">\n                    <span class="caret"></span>\n                    <span class="sr-only">Toggle Dropdown</span>\n                </button>\n                \n                <div class="dropdown-menu dropdown-menu-right">\n                    <a class=\'dropdown-item blockpy-toolbar-download\'\n                        data-bind="click: ui.editors.download">\n                    <span class=\'fas fa-download\'></span> Download\n                    </a>\n                </div>\n            </div>\n         \n         <div class="btn-group mr-2" role="group" aria-label="History Group">\n            <button type="button" class="btn btn-outline-secondary"\n                aria-pressed="false"\n                data-bind="click: ui.editors.python.toggleHistoryMode,\n                           enable: ui.editors.python.isHistoryAvailable,\n                           css: { active: display.historyMode },\n                           attr: { \'aria-pressed\': display.historyMode }">\n                <span class="fas fa-history"></span> 历史 \n             </button>\n         </div>\n         \n         \x3c!-- Fully functional, but a little too.. Invasive \n         <div class="btn-group mr-2" role="group" aria-label="Fullscreen Group"\n            data-bind="visible: display.pythonMode() === \'text\'">\n            <button type="button" class="btn btn-outline-secondary"\n                data-bind="click: ui.editors.python.fullscreen">\n                <span class="fas fa-expand-arrows-alt"></span> Fullscreen\n             </button>\n         </div>\n         --\x3e\n         \n         <div class="btn-group mr-2" role="group" aria-label="Save Group"\n            data-bind="visible: ui.editors.canSave">\n            <button type="button" class="btn btn-outline-secondary">\n                <span class="fas fa-save"></span> Save\n             </button>\n         </div>\n         \n         <div class="btn-group mr-2" role="group" aria-label="Delete Group"\n            data-bind="visible: ui.editors.canDelete">\n            <button type="button" class="btn btn-outline-secondary",\n                data-bind="click: ui.files.delete">\n                <span class="fas fa-trash"></span> Delete\n             </button>\n         </div>\n         \n         <div class="btn-group mr-2" role="group" aria-label="Rename Group"\n            data-bind="visible: ui.editors.canRename">\n             <button type="button" class="btn btn-outline-secondary">\n                <span class="fas fa-file-signature"></span> Rename\n             </button>\n         </div>\n         \n    </div>\n    \n    ').concat(o.b,'\n\n\n    <div class="blockpy-python-blockmirror"\n        data-bind="hidden: ui.menu.isSubmitted">\n    </div>\n');var h={name:"Python",extensions:[".py"],constructor:function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&l(e,t)}(u,e);var t,n,o,s=c(u);function u(e,t){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),n=s.call(this,e,t.find(".blockpy-python-blockmirror")),Blockly.setParentContainer(e.model.configuration.container[0]),n.bm=new BlockMirror({container:n.tag[0],run:e.components.engine.run.bind(e.components.engine),skipSkulpt:!0,blocklyMediaPath:e.model.configuration.blocklyPath,toolbox:e.model.assignment.settings.toolbox(),imageMode:!0,imageDownloadHOok:function(e){return e},imageUploadHook:function(e){return Promise.resolve("Image("+JSON.stringify(URL.createObjectURL(e))+")")},imageLiteralHook:function(e){return'Image("'.concat(e,'")')}}),n.dirty=!1,n.readOnly=!1,n.makeSubscriptions(),n.lineErrorSubscription=null,n.lineUncoveredSubscription=null,n.oldPythonMode=n.main.model.display.pythonMode(),n.makePerAssignmentSubscriptions(),n}return t=u,(n=[{key:"configureExtraBlockly",value:function(){var e=this;this.bm.blockEditor.workspace.configureContextMenu=function(t){t.push({enabled:!0,text:"Screenshot",callback:function(){return e.main.components.dialog.SCREENSHOT_BLOCKS}})}}},{key:"enter",value:function(e,t){var n=this,i=this.filename;a(d(u.prototype),"enter",this).call(this,e,t),this.dirty=!1,"answer.py"!==e?("answer.py"===i&&(this.oldPythonMode=this.main.model.display.pythonMode()),this.main.model.display.pythonMode(f.TEXT)):this.main.model.display.pythonMode(this.oldPythonMode),this.updateEditor(this.file.handle()),this.currentSubscription=this.file.handle.subscribe(this.updateEditor.bind(this)),this.currentBMListener=this.updateHandle.bind(this),this.bm.addChangeListener(this.currentBMListener),"answer.py"!==e?this.bm.isParsons=function(){return!1}:(this.bm.isParsons=this.main.model.assignment.settings.isParsons,this.lineErrorSubscription=this.main.model.execution.feedback.linesError.subscribe((function(e){return n.bm.setHighlightedLines(e,"editor-error-line")})),this.lineUncoveredSubscription=this.main.model.execution.feedback.linesUncovered.subscribe((function(e){return n.bm.setHighlightedLines(e,"editor-uncovered-line")}))),setTimeout((function(){return n.bm.refresh()}),0)}},{key:"updateEditor",value:function(e){if(void 0===e)e=null!==this.file?this.file.handle():"";else if(null===e)return void this.main.components.fileSystem.deleteFileLocally_(this.filename);this.dirty=!this.dirty,this.dirty&&(this.dirty=!0,this.bm.setCode(e),this.dirty=!1)}},{key:"updateHandle",value:function(e){this.bm.clearHighlightedLines(),this.dirty=!this.dirty,this.dirty&&(this.dirty=!0,this.main.model.display.historyMode()||this.file.handle(this.bm.getCode()),this.dirty=!1)}},{key:"exit",value:function(e,t,n){this.dirty=!1,this.currentSubscription.dispose(),this.bm.removeChangeListener(this.currentBMListener),this.main.model.display.historyMode()&&this.main.model.ui.editors.python.turnOffHistoryMode(),this.clearLineSubscriptions(),a(d(u.prototype),"exit",this).call(this,e,t)}},{key:"clearLineSubscriptions",value:function(){this.bm.clearHighlightedLines(),this.lineErrorSubscription&&(this.lineErrorSubscription.dispose(),this.lineErrorSubscription=null),this.lineUncoveredSubscription&&(this.lineUncoveredSubscription.dispose(),this.lineUncoveredSubscription=null)}},{key:"makeSubscriptions",value:function(){var e=this;this.bm.setMode(this.main.model.display.pythonMode()),this.main.model.display.pythonMode.subscribe((function(t){e.bm.setMode(t)})),this.main.model.assignment.settings.enableBlocks.subscribe((function(t){t?e.bm.setMode(e.main.model.display.pythonMode()):e.bm.setMode(f.TEXT)})),this.main.model.assignment.settings.toolbox.subscribe((function(t){e.bm.configuration.toolbox=t,e.bm.blockEditor.remakeToolbox()})),this.main.model.assignment.settings.enableImages.subscribe((function(t){e.bm.setImageMode(t)}))}},{key:"makePerAssignmentSubscriptions",value:function(){var e=this;this.main.model.display.instructor.subscribe((function(t){e.setReadOnly(e.decideIfNotEditable())})),this.main.model.assignment.settings.onlyUploads.subscribe((function(t){e.setReadOnly(e.decideIfNotEditable())}))}},{key:"decideIfNotEditable",value:function(){var e=this.main.model;return e.display.historyMode()||e.assignment.settings.onlyUploads()&&!e.display.instructor()}},{key:"setReadOnly",value:function(e){this.readOnly=e,this.bm.setReadOnly(e)}},{key:"uploadFile",value:function(e){var t=e.target.fileName,n=e.target.result;t.endsWith(".ipynb")&&(n=function(e){return JSON.parse(e).cells.filter((function(e){return"code"===e.cell_type?e.source.length>0&&!e.source[0].startsWith("%"):"markdown"===e.cell_type||"raw"===e.cell_type})).map((function(e){return"code"===e.cell_type?e.source.join("\n"):"markdown"===e.cell_type||"raw"===e.cell_type?"'''"+e.source.join("\n")+"'''":void 0})).join("\n")}(n)),this.main.components.server.logEvent("X-File.Upload","","",n,this.filename),this.file.handle(n),this.main.components.engine.run()}},{key:"downloadFile",value:function(){var e=a(d(u.prototype),"downloadFile",this).call(this);return"answer"===e.name&&".py"===e.extension&&(e.name=Object(i.c)(this.main.model.assignment.name())),e.mimetype="text/x-python",this.main.components.server.logEvent("X-File.Download","","","",e.name),e}}])&&r(t.prototype,n),o&&r(t,o),u}(i.a),template:m}},function(e,t,n){"use strict";n.d(t,"a",(function(){return C})),n.d(t,"b",(function(){return P}));var i=n(6),o=n(2);function s(e){return(s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function r(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function a(e,t,n){return(a="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var i=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=d(e)););return e}(e,t);if(i){var o=Object.getOwnPropertyDescriptor(i,t);return o.get?o.get.call(n):o.value}})(e,t,n||e)}function l(e,t){return(l=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function c(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,i=d(e);if(t){var o=d(this).constructor;n=Reflect.construct(i,arguments,o)}else n=i.apply(this,arguments);return u(this,n)}}function u(e,t){if(t&&("object"===s(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function d(e){return(d=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var f={name:"Text",extensions:[".txt"],constructor:function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&l(e,t)}(s,e);var t,n,i,o=c(s);function s(e,t){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,s),(n=o.call(this,e,t)).codeMirror=CodeMirror.fromTextArea(t.find(".blockpy-editor-text")[0],{showCursorWhenSelecting:!0,lineNumbers:!0,firstLineNumber:1,indentUnit:4,tabSize:4,indentWithTabs:!1,extraKeys:{Tab:"indentMore","Shift-Tab":"indentLess",Esc:function(e){e.getOption("fullScreen")?e.setOption("fullScreen",!1):e.display.input.blur()},F11:function(e){e.setOption("fullScreen",!e.getOption("fullScreen"))}}}),n.dirty=!1,n}return t=s,(n=[{key:"enter",value:function(e,t){a(d(s.prototype),"enter",this).call(this,e,t),this.dirty=!1,this.updateEditor(this.file.handle()),this.currentSubscription=this.file.handle.subscribe(this.updateEditor.bind(this)),this.currentListener=this.updateHandle.bind(this),this.codeMirror.on("change",this.currentListener),t!==this&&setTimeout(this.codeMirror.refresh.bind(this.codeMirror),1),this.codeMirror.setOption("readOnly",e.startsWith("&")&&!this.main.model.display.instructor())}},{key:"updateEditor",value:function(e){this.dirty=!this.dirty,this.dirty&&(this.dirty=!0,this.codeMirror.setValue(e),this.codeMirror.refresh(),this.dirty=!1)}},{key:"updateHandle",value:function(e){this.dirty=!this.dirty,this.dirty&&(this.dirty=!0,this.file.handle(this.codeMirror.getValue()),this.dirty=!1)}},{key:"exit",value:function(e,t,n){this.currentSubscription.dispose(),this.codeMirror.off("change",this.currentListener),this.codeMirror.setOption("readOnly",!1),a(d(s.prototype),"exit",this).call(this,e,t)}}])&&r(t.prototype,n),i&&r(t,i),s}(o.a),template:'\n    <div>\n    <textarea class="blockpy-editor-text"></textarea>\n    </div>\n'},p=n(8);function m(e){return(m="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function h(e,t){return(h=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function b(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,i=v(e);if(t){var o=v(this).constructor;n=Reflect.construct(i,arguments,o)}else n=i.apply(this,arguments);return y(this,n)}}function y(e,t){if(t&&("object"===m(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function v(e){return(v=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var g={name:"Tags",extensions:["!tags.blockpy"],constructor:function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&h(e,t)}(n,e);var t=b(n);function n(e,i){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,n),t.call(this,e,i.find(".blockpy-editor-tags"))}return n}(o.a),template:"\nCreate new\nImport by name\nFind by owner/course/kind\n\nTags:\n    Data:\n        Name\n        Kind\n        Level\n        Version\n        Description\n    Controls:\n        Edit\n        Remove\n        Delete \n"};function k(e){return(k="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function S(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function _(e,t,n){return(_="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var i=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=O(e)););return e}(e,t);if(i){var o=Object.getOwnPropertyDescriptor(i,t);return o.get?o.get.call(n):o.value}})(e,t,n||e)}function w(e,t){return(w=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function x(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,i=O(e);if(t){var o=O(this).constructor;n=Reflect.construct(i,arguments,o)}else n=i.apply(this,arguments);return E(this,n)}}function E(e,t){if(t&&("object"===k(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function O(e){return(O=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var R={name:"Markdown",extensions:[".md"],constructor:function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&w(e,t)}(s,e);var t,n,i,o=x(s);function s(e,t){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,s),(n=o.call(this,e,t)).mde=new EasyMDE({element:t.find(".blockpy-editor-markdown")[0],autoDownloadFontAwesome:!1,forceSync:!0,minHeight:"500px",renderingConfig:{codeSyntaxHighlighting:!0},indentWithTabs:!1,tabSize:4}),n.dirty=!1,n}return t=s,(n=[{key:"enter",value:function(e,t){_(O(s.prototype),"enter",this).call(this,e,t),this.dirty=!1,this.updateEditor(this.file.handle()),this.currentSubscription=this.file.handle.subscribe(this.updateEditor.bind(this)),this.currentListener=this.updateHandle.bind(this),this.mde.codemirror.on("change",this.currentListener),t!==this&&setTimeout(this.mde.codemirror.refresh.bind(this.mde.codemirror),1)}},{key:"updateEditor",value:function(e){this.dirty=!this.dirty,this.dirty&&(this.dirty=!0,this.mde.value(e),this.mde.codemirror.refresh(),this.dirty=!1)}},{key:"updateHandle",value:function(e){this.dirty=!this.dirty,this.dirty&&(this.dirty=!0,this.file.handle(this.mde.value()),this.dirty=!1)}},{key:"exit",value:function(e,t,n){this.currentSubscription.dispose(),this.mde.codemirror.off("change",this.currentListener),_(O(s.prototype),"exit",this).call(this,e,t)}}])&&S(t.prototype,n),i&&S(t,i),s}(o.a),template:'\n    <textarea class="blockpy-editor-markdown"></textarea>    \n'};function T(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var I=["!","^","?","$"],F=[f,i.b,p.a,g,R],C=F.map((function(e){return'\n<div class="col-md-12 blockpy-panel blockpy-editor">\n    <div data-bind="visible: ui.editors.view().name === \''.concat(e.name,"'\">\n    ").concat(e.template,"    \n    </div>\n</div>\n")})).join("\n"),P=function(){function e(t,n){var i=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.main=t,this.tag=n,this.current=null,this.registered_=[],this.extensions_={},this.byName_={},F.forEach((function(e){return i.registerEditor(e)})),this.main.model.display.filename.subscribe(this.changeEditor,this)}var t,n,i;return t=e,i=[{key:"parseFilename",value:function(e){var t=e.charAt(0);return-1!==I.indexOf(t)?e=e.substr(1):t="",{space:t,name:e.substr(0,e.lastIndexOf(".")),type:e.substr(e.lastIndexOf("."))}}}],(n=[{key:"registerEditor",value:function(e){var t=e.extensions,n=new e.constructor(this.main,this.tag);n.name=e.name,this.registered_.push(n),this.byName_[e.name.toLowerCase()]=n;for(var i=0;i<t.length;i++)this.extensions_[t[i]]=n}},{key:"byName",value:function(e){return this.byName_[e.toLowerCase()]}},{key:"changeEditor",value:function(e){var t=this.current,n=this.getEditor(e,t);null!==t&&t.exit(e,t,n),this.current=n,this.current.enter(e,t)}},{key:"getEditor",value:function(t){var n=e.parseFilename(t),i=(n.space,n.name,n.type);return".blockpy"===i&&t in this.extensions_?this.extensions_[t]:i in this.extensions_?this.extensions_[i]:this.registered_[0]}}])&&T(t.prototype,n),i&&T(t,i),e}()},function(e,t,n){"use strict";(function(e){n.d(t,"d",(function(){return y})),n.d(t,"b",(function(){return v})),n.d(t,"c",(function(){return g})),n.d(t,"a",(function(){return k}));var i=n(2),o=n(6);function s(e){return(s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function r(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function a(e,t,n){return(a="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var i=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=d(e)););return e}(e,t);if(i){var o=Object.getOwnPropertyDescriptor(i,t);return o.get?o.get.call(n):o.value}})(e,t,n||e)}function l(e,t){return(l=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function c(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,i=d(e);if(t){var o=d(this).constructor;n=Reflect.construct(i,arguments,o)}else n=i.apply(this,arguments);return u(this,n)}}function u(e,t){if(t&&("object"===s(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function d(e){return(d=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var f=[["toolbox","toolbox","normal","toolbox","Which version of the toolbox to present to the user."],["passcode","passcode","","string","A string that the user must enter to access the problem. If blank, then no passcode is prompted."],["startView","start_view",o.a.SPLIT,o.a,"The Python editor mode to start in when the student starts the problem."],["datasets","datasets","","string","The current list of datasets available on load as a comma-separated string."],["disableTimeout","disable_timeout",!1,"bool","If checked, then students code is allowed to run without timeouts (potentially allowing infinite loops)."],["isParsons","is_parsons",!1,"bool","If checked, then this is a parson's style question (jumbled)."],["disableFeedback","disable_feedback",!1,"bool","If checked, then no instructor scripts are run (e.g., on_run and on_eval)."],["disableInstructorRun","disable_instructor_run",!1,"bool","If checked, then the instructor on_run will not automatically run the students' code. This still runs the students' code."],["disableStudentRun","disable_student_run",!1,"bool","If checked, then the run button no longer run the students' code. This still runs the instructor's feedback on_run script."],["disableTifa","disable_tifa",!1,"bool","If checked, then do not automatically run Tifa (which can be slow)."],["disableTrace","disable_trace",!1,"bool","If checked, then the students code will not have its execution traced (no variables recorded, no coverage tracked)."],["disableEdit","disable_edit",!1,"bool","If checked, then the students' file will not be editable."],["enableImages","can_image",!1,"bool","If checked, then users can copy/paste images directly into the text editor."],["enableBlocks","can_blocks",!0,"bool","If checked, then the student can edit the block interface (if not, then it is visible but not editable)."],["canClose","can_close",!1,"bool","If checked, then the student should mark their submission closed when they are done. There is no way to force a student to do so. Unlike Reviewed, this still submits the correctness."],["onlyInteractive","only_interactive",!1,"bool","If checked, the editors are hidden, the program is automatically run, and then the console enters Eval mode (interactive)."],["onlyUploads","only_uploads",!1,"bool","If checked, then the students' file will not be directly editable (they will have to upload submissions)."],["hideSubmission","hide_submission",!1,"bool","If checked, then students will not be able to see their submission's code or history on Canvas."],["hideFiles","hide_files",!0,"bool","If checked, then students will not see the View Files toolbar."],["hideQueuedInputs","hide_queued_inputs",!1,"bool","If checked, then the students cannot access the queued inputs box (makes repeated debugging easier for the input function)."],["hideEditors","hide_editors",!1,"bool","If checked, then all of the editors are hidden."],["hideMiddlePanel","hide_middle_panel",!1,"bool","If checked, then the console and feedback areas is hidden."],["hideAll","hide_all",!1,"bool","INCOMPLETE: If checked, then the entire interface is hidden."],["hideEvaluate","hide_evaluate",!1,"bool","If checked, then the Evaluate button is not shown on the console."],["hideImportDatasetsButton","hide_import_datasets_button",!1,"bool","If checked, then students cannot see the import datasets button."],["hideImportStatements","hide_import_statements",!1,"bool","INCOMPLETE: If checked, certain kinds of import statements (matplotlib, turtle, datasets) are not shown in the block interface."],["hideCoverageButton","hide_coverage_button",!1,"bool","INCOMPLETE: If checked, the coverage button is not shown."],["saveTurtleOutput","save_turtle_output",!1,"bool","If checked, then turtle output is saved whenever the program uses it."]];function p(e){for(var t=0;t<f.length;t++)if(f[t][0]===e)return f[t][4];return"Documentation not found for field"}function m(e,t,n){return'<label class="btn btn-outline-secondary blockpy-mode-set-blocks"\n                data-bind="css: {active: assignment.settings.startView() === \''.concat(n,"'},\n                           click: assignment.settings.startView.bind($data, '").concat(n,"')\">\n                <span class='fas fa-").concat(t,'\'></span>\n                <input type="radio" name="blockpy-start-view-set" autocomplete="off" checked> ').concat(e,"\n            </label>")}var h=f.filter((function(e){return"bool"===e[3]})).map((function(e){var t=e[1].split("_").map((function(e){return e.charAt(0).toUpperCase()+e.slice(1)})).join(" ");return'\n        <div class="form-group row">\n            <div class="col-sm-2 text-right">\n                <label class="form-check-label" for="blockpy-settings-'.concat(e[0],'">').concat(t,'</label>\n            </div>\n            <div class="col-sm-1">\n                <div class="form-check">\n                    <input class="form-check-input" type="checkbox" id="blockpy-settings-').concat(e[0],'"\n                    data-bind="checked: assignment.settings.').concat(e[0],'">\n                </div>  \n            </div>            \n            <div class="col-sm-9">\n                <small class="form-text text-muted">\n                    ').concat(e[4],"\n                </small>\n            </div>\n        </div>\n        ")})).join("\n\n"),b='\n    <div class="blockpy-view-settings">\n    \n    <form>\n\n        <div class="form-group row">\n            <div class="col-sm-12 mx-auto">\n                <button type="button" class="btn btn-success"\n                    data-bind="click: ui.editors.settings.save">Save changes</button>\n            </div>\n        </div>\n    \n        <div class="form-group row">\n            <label for="blockpy-settings-name" class="col-sm-2 col-form-label text-right">Name:</label>\n            <div class="col-sm-10">\n                <input type="text" class="form-control" id="blockpy-settings-name"\n                data-bind="value: assignment.name">\n                <small class="form-text text-muted">\n                    The student-facing name of the assignment. Assignments within a group are ordered alphabetically\n                    by their name, so you may want to use a naming scheme like "#43.5) Whatever".\n                </small>\n            </div>\n        </div>\n        \n        <div class="form-group row">\n            <label for="blockpy-settings-url" class="col-sm-2 col-form-label text-right">URL:</label>\n            <div class="col-sm-10">\n                <input type="text" class="form-control" id="blockpy-settings-url"\n                data-bind="value: assignment.url">\n                <small class="form-text text-muted">\n                    The course-unique URL that can be used to consistently refer to this assignment. \n                </small>\n            </div>\n        </div>\n        \n        <div class="form-group row">\n            <div class="col-sm-2 text-right">\n                <label class="form-check-label" for="blockpy-settings-public">Public:</label>\n            </div>\n            <div class="col-sm-1">\n                <div class="form-check">\n                    <input class="form-check-input" type="checkbox" id="blockpy-settings-public"\n                    data-bind="checked: assignment.public">\n                </div>  \n            </div>            \n            <div class="col-sm-9">\n                <small class="form-text text-muted">\n                    If not public, users outside of the course will not be able to see the assignment in course listings.\n                </small>\n            </div>\n        </div>\n        \n        <div class="form-group row">\n            <div class="col-sm-2 text-right">\n                <label class="form-check-label" for="blockpy-settings-hidden">Hidden:</label>\n            </div>\n            <div class="col-sm-1">\n                <div class="form-check">\n                    <input class="form-check-input" type="checkbox" id="blockpy-settings-hidden"\n                    data-bind="checked: assignment.hidden">\n                </div>  \n            </div>            \n            <div class="col-sm-9">\n                <small class="form-text text-muted">\n                    If hidden, students will not be able to see their grade while working on the assignment.\n                </small>\n            </div>\n        </div>\n        \n        <div class="form-group row">\n            <div class="col-sm-2 text-right">\n                <label class="form-check-label" for="blockpy-settings-reviewed">Reviewed:</label>\n            </div>\n            <div class="col-sm-1">\n                <div class="form-check">\n                    <input class="form-check-input" type="checkbox" id="blockpy-settings-reviewed"\n                    data-bind="checked: assignment.reviewed">\n                </div>  \n            </div>            \n            <div class="col-sm-9">\n                <small class="form-text text-muted">\n                    If reviewed, the assignment need to be commented upon and regraded by the staff after submission.\n                </small>\n            </div>\n        </div>\n        \n        <div class="form-group row">\n            <div class="col-sm-2 text-right">\n                <label class="form-check-label" for="blockpy-settings-reviewed">Starting View:</label>\n            </div>\n            <div class="col-sm-3">\n                <div class="btn-group btn-group-toggle mr-2" data-toggle="buttons">\n                    '.concat(m("Blocks","th-large",o.a.BLOCK),"\n                    ").concat(m("Split","columns",o.a.SPLIT),"\n                    ").concat(m("Text","align-left",o.a.TEXT),'\n                 </div>\n            </div>            \n            <div class="col-sm-7">\n                <small class="form-text text-muted">\n                    ').concat(p("startView"),'\n                </small>\n            </div>\n        </div>\n        \n        <div class="form-group row">\n            <label for="blockpy-settings-ip-ranges" class="col-sm-2 col-form-label text-right">IP Ranges:</label>\n            <div class="col-sm-10">\n                <input type="text" class="form-control" id="blockpy-settings-ip-ranges"\n                data-bind="value: assignment.ipRanges">\n                <small class="form-text text-muted">\n                    Provide a comma-separated list of IP Addresses that will be explicitly allowed. If blank,\n                    then all addresses are allowed. If an address starts with <code>^</code> then it it is explicitly\n                    blacklisted, but that can be overridden in turn with a <code>!</code>. Addresses can also\n                    include a bit mask to allow a range of addresses.\n                </small>\n            </div>\n        </div>\n        \n        <div class="form-group row">\n            <label for="blockpy-settings-passcode" class="col-sm-2 col-form-label text-right">Passcode:</label>\n            <div class="col-sm-10">\n                <input type="text" class="form-control" id="blockpy-settings-passcode"\n                data-bind="value: assignment.settings.passcode">\n                <small class="form-text text-muted">\n                    ').concat(p("passcode"),'\n                </small>\n            </div>\n        </div>\n        \n        <div class="form-group row">\n            <label for="blockpy-settings-datasets" class="col-sm-2 col-form-label text-right">Preloaded Datasets:</label>\n            <div class="col-sm-10">\n                <input type="text" class="form-control" id="blockpy-settings-datasets"\n                data-bind="value: assignment.settings.datasets">\n                <small class="form-text text-muted">\n                    ').concat(p("datasets"),'\n                </small>\n            </div>\n        </div>\n        \n        <div class="form-group row">\n            <label for="blockpy-settings-toolbox" class="col-sm-2 col-form-label text-right">Block Toolbox:</label>\n            <div class="col-sm-10">\n                <select class="form-control" id="blockpy-settings-toolbox"\n                       data-bind="value: assignment.settings.toolbox">\n                   <option value="normal">Normal Toolbox</option>\n                   <option value="ct">CT@VT Toolbox</option>\n                   <option value="ct2">CT@VT Toolbox V2</option>\n                   <option value="minimal">Minimal Set</option>\n                   <option value="full">All Blocks</option>\n                </select>\n                <small class="form-text text-muted">\n                    ').concat(p("toolbox"),"\n                </small>\n            </div>\n        </div>\n        \n        ").concat(h,"\n    </form>\n    \n    </div>\n");function y(e){var t={};return f.forEach((function(n){var i=n[0],o=n[1],s=n[2],r=e.assignment.settings[i]();r!==s&&(t[o]=r)})),JSON.stringify(t)}function v(e,t){t&&(t=JSON.parse(t),f.forEach((function(n){var i=n[0],o=n[1];o in t?e.assignment.settings[i](t[o]):e.assignment.settings[i](n[2])})),t.start_view&&e.display.pythonMode(t.start_view))}function g(t){var n={};return f.forEach((function(i){var o=i[0],s=i[1],r=i[2],a=i[3];if(void 0===t["assignment.settings."+s])n[o]=e.observable(r);else{var l=t["assignment.settings."+s];"bool"===a&&(l="true"===l.toLowerCase()),n[o]=e.observable(l)}})),n}var k={name:"Assignment Settings",extensions:["!assignment_settings.blockpy"],constructor:function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&l(e,t)}(s,e);var t,n,i,o=c(s);function s(e,t){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,s),(n=o.call(this,e,t)).dirty=!1,n}return t=s,(n=[{key:"enter",value:function(e,t){a(d(s.prototype),"enter",this).call(this,e,t),console.log(this.file),this.dirty=!1,this.currentListener=this.updateHandle.bind(this)}},{key:"updateEditor",value:function(e){this.dirty=!this.dirty,this.dirty&&(this.dirty=!0,this.dirty=!1)}},{key:"updateHandle",value:function(e){this.dirty=!this.dirty,this.dirty&&(this.dirty=!0,this.dirty=!1)}},{key:"exit",value:function(e,t,n){a(d(s.prototype),"exit",this).call(this,e,t)}}])&&r(t.prototype,n),i&&r(t,i),s}(i.a),template:b}}).call(this,n(16))},function(e,t,n){"use strict";function i(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}n.d(t,"b",(function(){return o})),n.d(t,"a",(function(){return s}));var o='\n\n<div class="blockpy-trace col-md-6 blockpy-panel"\n            role="region" aria-label="Trace">\n    \n    <div class="clearfix">\n        <strong>Trace: </strong>\n        \n        \x3c!-- Feedback/Trace Visibility Control --\x3e\n        <button type=\'button\'\n                class=\'btn btn-sm btn-outline-secondary float-right blockpy-hide-trace\'\n                data-bind="click: ui.secondRow.advanceState">\n            <span class=\'fas fa-eye\'></span> Hide Trace\n        </button>\n    </div>\n\n    <div class="input-group mb-3 blockpy-trace-controls">\n        <div class="input-group-prepend">\n            <button type=\'button\' class=\'btn btn-outline-secondary\'\n                data-bind="click: ui.trace.first">\n                <span class=\'fas fa-step-backward\'></span>\n            </button>\n            <button type=\'button\' class=\'btn btn-outline-secondary\'\n                data-bind="click: ui.trace.backward">\n                <span class=\'fas fa-backward\'></span>\n            </button>\n            <span class="input-group-text">Step:</span>\n            <span class="input-group-text">\n                <span data-bind=\'text: execution.student.currentTraceStep\'></span>\n                / <span data-bind=\'text: execution.student.lastStep\'></span>\n            </span>\n        </div>\n        <div class="input-group-append">\n            <button type=\'button\' class=\'btn btn-outline-secondary\'\n                data-bind="click: ui.trace.forward">\n                <span class=\'fas fa-forward\'></span>\n            </button>\n            <button type=\'button\' class=\'btn btn-outline-secondary\'\n                data-bind="click: ui.trace.last">\n                <span class=\'fas fa-step-forward\'></span>\n            </button>\n            <span class="input-group-text">\n                <span data-bind=\'text: ui.trace.line\'></span>\n            </span>\n        </div>\n    </div>\n    \n    <table class=\'table table-sm table-striped table-bordered table-hover\'>\n        <caption>Current variables at this step</caption>\n        <thead>\n            <tr><th>Name</th><th>Type</th><th>Value</th></tr>\n        </thead>\n        <tbody data-bind="foreach: ui.trace.data().properties">\n            <tr data-bind="visible: name != \'__file__\' && name != \'__path__\'">\n                <td data-bind="text: name"></td>\n                <td data-bind="text: type"></td>\n                <td>\n                    <code data-bind="text: value"></code>\n                    \x3c!-- ko if: type == "List" --\x3e\n                    \n                    <a href="" data-bind="click: //$root.viewExactValue(type, exact_value)">\n                    <span class=\'glyphicon glyphicon-new-window\'></span>\n                    </a>\n                    \x3c!-- /ko --\x3e\n                </td>\n            </tr>\n        </tbody>\n    </table>\n    \n</div>\n',s=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.main=t,this.tag=n,this.IGNORED_GLOBALS=["__name__","__doc__","__package__","classmethod","property","staticmethod"]}var t,n,o;return t=e,o=[{key:"parseValue",value:function(e,t,n){if(void 0===t)return{name:e,type:"Unknown",value:"Undefined"};switch(t.constructor){case Sk.builtin.func:return{name:e,type:"Function",value:void 0!==t.func_code.co_varnames?" Arguments: "+t.func_code.co_varnames.join(", "):" No arguments"};case Sk.builtin.module:return null;case Sk.builtin.str:return n||t.v.length<=32?{name:e,type:"String",value:t.$r().v}:{name:e,type:"String",value:"["+t.sq$length()+" characters not shown]"};case Sk.builtin.none:return{name:e,type:"None",value:"None"};case Sk.builtin.bool:return{name:e,type:"Boolean",value:t.$r().v};case Sk.builtin.nmber:return{name:e,type:"int"===t.skType?"Integer":"Float",value:t.$r().v};case Sk.builtin.int_:return{name:e,type:"Integer",value:t.$r().v};case Sk.builtin.float_:return{name:e,type:"Float",value:t.$r().v};case Sk.builtin.tuple:return{name:e,type:"Tuple",value:t.$r().v};case Sk.builtin.list:return t.v.length<=20?{name:e,type:"List",value:t.$r().v,exact_value:t}:{name:e,type:"List",value:"[... "+t.v.length+" elements ...]",exact_value:t};case Sk.builtin.dict:return{name:e,type:"Dictionary",value:t.$r().v};case Number:return{name:e,type:t%1==0?"Integer":"Float",value:t};case String:return{name:e,type:"String",value:t};case Boolean:return{name:e,type:"Boolean",value:t?"True":"False"};default:return{name:e,type:void 0===t.tp$name?t:t.tp$name,value:void 0===t.$r?t:t.$r().v}}}}],(n=[{key:"parseGlobals",value:function(t){var n=[],i=[];if(!this.main.model.display.traceExecution())for(var o in t){var s=t[o];if(-1===this.IGNORED_GLOBALS.indexOf(o)){o=o.replace("_$rw$","").replace("_$rn$","");var r=void 0;try{r=e.parseValue(o,s)}catch(e){r={name:o,type:"Unknown",value:s.toString()}}null!==r?n.push(r):s.constructor===Sk.builtin.module&&i.push(s.$d.__name__.v)}}return{properties:n,modules:i}}}])&&i(t.prototype,n),o&&i(t,o),e}()},function(e,t,n){"use strict";(function(e){n.d(t,"c",(function(){return o})),n.d(t,"b",(function(){return s})),n.d(t,"a",(function(){return a}));var i=n(1),o={},s={},r=function(e){e.addClass("active").addClass("btn-success").removeClass("btn-primary").prop("disabled",!0).text("Loaded").attr("aria-pressed","true")};function a(e){this.main=e,this.loadedDatasets=[],this.loadDatasets()}a.prototype.loadDatasets=function(t){var n=this,o=this.main.model,s=this.main.components.pythonEditor,r=this.main.components.server,a=[];o.assignment.settings.datasets().split(",").forEach((function(e){e&&!(e in BlockMirrorBlockEditor.EXTRA_TOOLS)&&a.push.apply(a,n.importDataset(Object(i.e)(e),e,t))})),e.when.apply(e,a).done((function(){s.bm.forceBlockRefresh(),s.bm.blockEditor.remakeToolbox()})).fail((function(e){console.log(arguments),console.error(e)})).always((function(){r.finalizeSubscriptions()}))},a.prototype.importDataset=function(t,n){var i=this,o=[];if(this.main.model.ui.server.isEndpointConnected("importDatasets")){var s=this.main.model.configuration.urls.importDatasets+"blockpy/"+t+"/"+t;this.main.model.display.loadingDatasets.push(n);var r=e.getScript(s+"_dataset.js"),a=(e.getScript(s+"_complete.js"),e.get(s+"_skulpt.js",(function(e){Sk.builtinFiles.files["src/lib/"+t+"/__init__.js"]=e}))),l=e.getScript(s+"_blockly.js");e.when(r,a,l).done((function(){i.loadedDatasets.push(t),i.main.components.pythonEditor.bm.textToBlocks.hiddenImports.push(t),i.main.components.pythonEditor.bm.forceBlockRefresh(),i.main.components.pythonEditor.bm.blockEditor.remakeToolbox(),i.main.model.display.loadingDatasets.remove(n)})),o.push(r,a,l)}return o},a.prototype.openDialog=function(){var t=this;if(this.main.model.ui.server.isEndpointConnected("importDatasets")){var n=this.main.model.configuration.urls.importDatasets;e.getJSON(n+"index.json",(function(o){var s=o.blockpy,a=e("<p>Documentation is available at <a href='".concat(n+"blockpy/index.html","' target=_blank>url</a></p>")),l=e("<table></table>",{class:"table table-bordered table-sm table-striped"});Object.keys(s).sort().map((function(n){var o=Object(i.e)(s[n].name),a=e('<button type="button" class="btn btn-primary" data-toggle="button" aria-pressed="false" autocomplete="off">Load</button>');t.loadedDatasets.indexOf(o)>-1?r(a):a.click((function(){t.importDataset(o,"Data - "+s[n].title),r(a)})),e("<tr></tr>").append(e("<td>"+s[n].title+"</td>")).append(e("<td>"+s[n].overview+"</td>")).append(e("<td></td>").append(a)).appendTo(l)})),l.appendTo(a),t.main.components.dialog.show("Import Datasets",a,null)}))}}}).call(this,n(5))},function(e,t,n){"use strict";(function(e){var i;n.d(t,"a",(function(){return s}));try{i=localStorage;var o="BLOCKPY_LOCALSTORAGE_TEST";i.setItem(o,o),i.removeItem(o)}catch(e){i={_data:{},setItem:function(e,t){return this._data[e]=String(t)},getItem:function(e){return this._data.hasOwnProperty(e)?this._data[e]:void 0},removeItem:function(e){return delete this._data[e]},clear:function(){return this._data={}}}}function s(e){this.namespace=e}s.prototype.set=function(t,n){i.setItem(this.namespace+"_"+t+"_value",n),i.setItem(this.namespace+"_"+t+"_timestamp",e.now())},s.prototype.remove=function(e){i.removeItem(this.namespace+"_"+e+"_value"),i.removeItem(this.namespace+"_"+e+"_timestamp")},s.prototype.get=function(e){return i.getItem(this.namespace+"_"+e+"_value")},s.prototype.getTime=function(e){return parseInt(i.getItem(this.namespace+"_"+e+"_timestamp"))},s.prototype.getDefault=function(e,t){return this.has(e)?this.get(e):(this.set(e,t),t)},s.prototype.has=function(e){return null!==i.getItem(this.namespace+"_"+e+"_value")},s.prototype.is_new=function(e,t){return t>=i.getItem(this.namespace+"_"+e+"_timestamp")+5e3}}).call(this,n(5))},function(e,t,n){"use strict";(function(e){function i(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}n.d(t,"b",(function(){return o})),n.d(t,"a",(function(){return s}));var o='\n<div class="blockpy-history-toolbar col-md-12" data-bind="visible: display.historyMode">\n\n    <form class="form-inline">\n        <button class="blockpy-history-start btn btn-outline-secondary mr-2" type="button"\n            data-bind="click: ui.editors.python.history.start">\n            <span class=\'fas fa-step-backward\'></span> Start\n        </button>\n        <button class="btn btn-outline-secondary mr-2" type="button"\n            data-bind="click: ui.editors.python.history.previous">\n            <span class=\'fas fa-backward\'></span> Previous\n        </button>\n        <select class="blockpy-history-selector form-control custom-select mr-2" aria-title="History Selector">\n        </select>\n        <button class="btn btn-outline-secondary mr-2" type="button"\n            data-bind="click: ui.editors.python.history.use">\n            <span class=\'fas fa-file-import\'></span> Use\n        </button>\n        <button class="btn btn-outline-secondary mr-2" type="button"\n            data-bind="click: ui.editors.python.history.next">\n            <span class=\'fas fa-forward\'></span> Next\n        </button>\n        <button class="btn btn-outline-secondary" type="button"\n            data-bind="click: ui.editors.python.history.mostRecent">\n            <span class=\'fas fa-step-forward\'></span> Most Recent\n        </button>\n    </form>\n</div>\n',s=function(){function t(e,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),this.main=e,this.tag=n,this.currentId=null,this.history=[],this.editEvents=[]}var n,o,s;return n=t,(o=[{key:"load",value:function(t){var n=this;this.history=t,this.editEvents=[],this.selector=e(".blockpy-history-selector").empty();var i=0;t.filter((function(e){return!(e.file_path.startsWith("_instructor.")||"Compile"===e.event_type||"Intervention"===e.event_type||n.main.model.assignment.hidden()&&"X-Submission.LMS"===e.event_type)})).forEach((function(t,o){var s=r[t.event_type]||t.event_type,a=c(t.client_timestamp)+" - "+s,l="File.Edit"!==t.event_type,u=e("<option></option>",{text:a,disabled:l});n.isEditEvent(t)&&(u.attr("value",i),n.editEvents.push(t),i+=1),n.selector.append(u)})),this.selector.val(Math.max(0,i-1)),this.selector.change((function(e){n.updateEditor()}))}},{key:"moveToStart",value:function(){this.selector.val(0),this.updateEditor()}},{key:"movePrevious",value:function(){var e=parseInt(this.selector.val(),10);this.selector.val(Math.max(0,e-1)),this.updateEditor()}},{key:"moveNext",value:function(){var e=parseInt(this.selector.val(),10);this.selector.val(Math.min(this.editEvents.length-1,e+1)),this.updateEditor()}},{key:"moveToMostRecent",value:function(){this.selector.val(this.editEvents.length-1),this.updateEditor()}},{key:"updateEditor",value:function(){if(this.editEvents.length){var e=parseInt(this.selector.val(),10);this.main.components.pythonEditor.bm.setCode(this.editEvents[e].message)}}},{key:"use",value:function(){if(this.editEvents.length){var e=parseInt(this.selector.val(),10),t=this.editEvents[e].message;this.main.model.ui.editors.python.turnOffHistoryMode(),this.main.components.pythonEditor.file.handle(t)}}},{key:"isEditEvent",value:function(e){return("File.Edit"===e.event_type||"File.Create"===e.event_type)&&this.main.model.display.filename()===e.file_path}}])&&i(n.prototype,o),s&&i(n,s),t}(),r={"Session.Start":"Began session","X-IP.Change":"Changed IP address","File.Edit":"Edited code","File.Create":"Started assignment","Run.Program":"Ran program","Compile.Error":"Syntax error","X-Submission.LMS":"Updated grade"},a=["Jan","Feb","Mar","Apr","May","June","July","Aug","Sept","Oct","Nov","Dec"],l=["Sun","Mon","Tue","Wed","Thu","Fri","Sat"];function c(e){if(void 0===e)return"Undefined Time";var t=new Date,n=new Date(parseInt(e,10));if(o=n,(i=t).getDate()===o.getDate()&&i.getMonth()===o.getMonth()&&i.getFullYear()===o.getFullYear())return"Today at "+n.toLocaleTimeString();var i,o,s=l[n.getDay()]+", "+a[n.getMonth()]+" "+n.getDate();return t.getFullYear()===n.getFullYear()?s+" at "+n.toLocaleTimeString():s+", "+n.getFullYear()+" at "+n.toLocaleTimeString()}s.prototype.openDialog=function(){var e=this.main.components.dialog,t="<pre>a = 0</pre>";this.main.components.server.getHistory((function(n){t=n.reverse().reduce((function(e,t){return e+"\n"+("<b>"+c(t.time)+"</b><br><pre>"+t.code+"</pre>")}),""),e.show("Work History",t,(function(){}))}))}}).call(this,n(5))},function(e,t,n){"use strict";n.d(t,"b",(function(){return i})),n.d(t,"a",(function(){return o}));var i="\n    <div class='blockpy-dialog modal hidden'\n         role=\"dialog\"\n         aria-label='Dialog'\n         aria-hidden=\"true\"\n         aria-modal=\"true\">\n        <div class='modal-dialog modal-lg' role=\"document\">\n            <div class='modal-content' role='region' aria-label='Dialog content'>\n                <div class='modal-header'>\n                    <h4 class='modal-title'>Dynamic Content</h4>\n                    <button type='button' class='close' data-dismiss='modal' aria-hidden='true'>\n                        <span aria-hidden=\"true\">&times;</span>\n                    </button>\n                </div>\n                <div class='modal-body' style='max-width:100%; max-height:400px'>\n                </div>\n                <div class='modal-footer'>\n                    <button type='button' class='btn btn-white modal-close' data-dismiss='modal'>Close</button>\n                    <button type='button' class='btn btn-success modal-okay' data-dismiss='modal'>Okay</button>\n                </div>    \n            </div>\n        </div>\n    </div>\n";function o(e,t){var n=this;this.main=e,this.tag=t,this.titleTag=t.find(".modal-title"),this.bodyTag=t.find(".modal-body"),this.footerTag=t.find(".modal-footer"),this.okayButton=t.find(".modal-okay"),this.closeButton=t.find(".modal-close"),this.yes=function(){},this.no=function(){},this.okayButton.click((function(){n.yes(),n.tag.modal("hide")})),this.closeButton.click((function(){n.no()}))}o.prototype.close=function(){this.tag.modal("hide")},o.prototype.show=function(e,t,n){this.titleTag.html(e),this.bodyTag.html(t),this.tag.modal("show"),this.okayButton.hide(),this.tag.draggable({handle:".modal-title"}),this.tag.on("hidden.bs.modal",(function(e){null!=n&&n()}))},o.prototype.confirm=function(e,t,n,i,o){void 0===o&&(o="Okay"),this.show(e,t,i),this.yes=n,this.no=i,this.okayButton.show().html(o)},o.prototype.ASSIGNMENT_VERSION_CHANGED=function(){this.confirm("Assignment Changed","Your instructor has made changes to this assignment. Would you like to reload? All your work has been saved.")},o.prototype.ERROR_LOADING_ASSIGNMNENT=function(e){this.show("Error Loading Assignment","BlockPy encountered an error while loading the assignment.<br>\nPlease reload the page and try again.<br>Response from server was:<br><pre>".concat(e,"</pre>"))},o.prototype.ERROR_SHOW_STUDENT_ERROR=function(e){this.show("Original Error",'When I ran your code, I encountered an error:\n\n<div class="blockpy-dialog-student-error-message">'.concat(e,"</div>"))},o.prototype.POSITIVE_FEEDBACK_FULL=function(e,t){this.show(e,t)},o.prototype.SCREENSHOT_BLOCKS=function(){},o.prototype.ERROR_UPDATING_SUBMISSION_STATUS=function(){this.show("Error Updating Submission Status","BlockPy encountered an error while updating your submission status.<br>\nPlease reload the page and try again.")},o.prototype.ERROR_LOADING_HISTORY=function(){this.show("Error Loading History","BlockPy encountered an error while loading your history.<br>\nPlease reload the page and try again.")},o.prototype.EDIT_INPUTS=function(){var e=this,t=this.main.model.execution.input().join("\n"),n=this.main.model.display.clearInputs()?"":"checked";this.confirm("Edit Remembered Inputs",'\n\n<div class="form-check">\n<input type="checkbox" class="blockpy-remember-inputs form-check-input"\n        name="blockpy-remember-inputs" '.concat(n,'>\n<label class="form-check-label" for="blockpy-remember-inputs">Reuse inputs for next execution</label>\n</div>\n\n<textarea class="blockpy-input-list form-control" rows="4">').concat(t,"</textarea><br>\nEdit the inputs above to store and reuse them across multiple executions.\nEach input should be put on its own line.\nYou do not need quotes; the text will be entered literally.\n \n"),(function(){var t=e.tag.find(".blockpy-remember-inputs").prop("checked"),n=e.tag.find(".blockpy-input-list").val().split("\n");e.main.model.display.clearInputs(!t),e.main.model.execution.input(n)}),this.no,"Save")}},function(e,t,n){"use strict";(function(e){function i(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}n.d(t,"b",(function(){return o})),n.d(t,"a",(function(){return s}));var o='\n\n<span class=\'blockpy-floating-feedback text-muted-less pull-right position-sticky sticky-top\'\n    aria-hidden="true" role="presentation" aria-label="New Feedback Alert">\n    New feedback &uarr;\n</span>\n\n<div class=\'blockpy-feedback col-md-6 blockpy-panel\'\n            role="region" aria-label="Feedback"\n            aria-live="polite">\n\n    \x3c!-- Feedback/Trace Visibility Control --\x3e\n    <button type=\'button\'\n            class=\'btn btn-sm btn-outline-secondary float-right\'\n            data-bind="click: ui.secondRow.advanceState">\n        <span class=\'fas fa-eye\'></span>\n        <span data-bind="text: ui.secondRow.switchLabel"></span>\n    </button>\n    \n    \x3c!-- Positive Feedback Region --\x3e\n    <div class="blockpy-feedback-positive float-right">\n        \n    \n    </div>\n\n    \x3c!-- Actual Feedback Region --\x3e    \n    <div>\n        <strong>反馈: </strong>\n        <span class=\'badge blockpy-feedback-category feedback-badge\'\n            data-bind="css: ui.feedback.badge,\n                       text: ui.feedback.category">Feedback Kind</span>\n        <small data-bind="text: (100*submission.score())+\'%\',\n                          visible: display.instructor() && execution.feedback.label()"\n            class="text-muted"></small>\n    </div>\n    <div>\n        <strong class="blockpy-feedback-label"\n            data-bind="text: execution.feedback.label"></strong>\n        <div class="blockpy-feedback-message"\n            data-bind="html: execution.feedback.message"></div>\n    </div>\n</div>            \n',s=function(){function t(e,n){var i=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),this.main=e,this.tag=n,this.feedbackModel=this.main.model.execution.feedback,this.category=this.tag.find(".blockpy-feedback-category"),this.label=this.tag.find(".blockpy-feedback-label"),this.message=this.tag.find(".blockpy-feedback-message"),this.positive=this.tag.find(".blockpy-feedback-positive"),this.main.model.submission.code.subscribe((function(){return i.main.model.display.dirtySubmission(!0)}))}var n,o,s;return n=t,s=[{key:"findFirstErrorLine",value:function(e){if(e.quick$lookup){var t=e.quick$lookup(new Sk.builtin.str("location"));if(t){var n=t.tp$getattr(new Sk.builtin.str("line"));if(n)return Sk.ffi.remapToJs(n)}}return null}}],(o=[{key:"scrollIntoView",value:function(){e("html, body").animate({scrollTop:this.tag.offset().top},1e3)}},{key:"isFeedbackVisible",value:function(){var t=this.tag.offset().top,n=t+100,i=e(window).scrollTop()+e(window).height(),o=e(window).scrollTop();return t<i&&o<n}},{key:"clear",value:function(){this.feedbackModel.message("*就绪*"),this.feedbackModel.category(null),this.feedbackModel.label(null),this.feedbackModel.hidden(!1),this.feedbackModel.linesError.removeAll(),this.feedbackModel.linesUncovered.removeAll(),this.clearPositiveFeedback()}},{key:"updateRegularFeedback",value:function(){}},{key:"updateFeedback",value:function(e){var n=this,i=Sk.ffi.remapToJs(e.MESSAGE),o=Sk.ffi.remapToJs(e.CATEGORY),s=Sk.ffi.remapToJs(e.LABEL),r=(Sk.ffi.remapToJs(e.HIDE),e.DATA),a=Sk.ffi.remapToJs(e.POSITIVE);this.main.model.assignment.hidden()&&"complete"===o.toLowerCase()&&(o="no errors",s="No errors",i="No errors reported."),"instructor"===o.toLowerCase()&&"explain"===s.toLowerCase()&&(s="Instructor Feedback"),"Instructor"===o&&"No errors"===s&&(o="no errors"),i=this.main.utilities.markdown(i).replace(/<pre>\n/g,"<pre>\n\n"),this.feedbackModel.message(i),this.feedbackModel.category(o),this.feedbackModel.label(s),this.message.find("pre code").map((function(e,t){window.hljs.highlightBlock(t)})),this.main.components.server.logEvent("Intervention",o,s,i,"answer.py"),this.main.components.pythonEditor.bm.clearHighlightedLines();var l=t.findFirstErrorLine(r);this.feedbackModel.linesError.removeAll(),null!=l&&this.feedbackModel.linesError.push(l);var c=this.main.model.execution.reports.student;if(this.feedbackModel.linesUncovered.removeAll(),c.success){var u=[];this.main.model.execution.reports.parser.lines.forEach((function(e){-1===c.lines.indexOf(e)&&u.push(e)})),this.feedbackModel.linesUncovered(u)}for(var d=function(e){var t=a[e];n.addPositiveFeedback(t.message,"star","green",(function(){return n.main.components.dialog.POSITIVE_FEEDBACK_FULL(t.title,t.message)}))},f=0;f<a.length;f+=1)d(f)}},{key:"clearPositiveFeedback",value:function(){this.positive.empty(),this.main.model.configuration.container.find(".blockpy-student-error").hide()}},{key:"addPositiveFeedback",value:function(t,n,i,o,s){var r=this,a=e("<span></span>");a.addClass("blockpy-feedback-positive-icon fas fa-"+n),a.css("color",i),a.attr("title",t),s?this.positive.append(a):this.positive.prepend(a),a.tooltip({trigger:"hover",container:this.main.model.configuration.attachmentPoint}),void 0!==o&&a.click(o),a.hover((function(){r.main.components.server.logEvent("X-Feedback","positive","hover",t,"")}))}},{key:"presentFeedback",value:function(e){this.updateFeedback(e),this.notifyFeedbackUpdate()}},{key:"notifyFeedbackUpdate",value:function(){this.isFeedbackVisible()||(this.tag.find(".blockpy-floating-feedback").show().fadeOut(7e3),this.scrollIntoView())}},{key:"presentRunError",value:function(e,t){var n,i;if(void 0===t&&(t=!1),i=e.tp$name,n=this.convertSkulptError(e),t)return n;this.feedbackModel.message(n),this.feedbackModel.category("runtime"),this.feedbackModel.label(i),this.feedbackModel.linesError.removeAll()}},{key:"convertSkulptError",value:function(e,t){var n=this,i=e.tp$name,o=Sk.ffi.remapToJs(e.args),s="".concat(i,": ").concat(o[0],"\n<br>\n<br>"),r="";return e.traceback&&e.traceback.length&&(r="Traceback:<br>\n"+e.traceback.map((function(e){var i=e.lineno;e.filename.slice(0,-3)===t&&(i-=n.main.model.execution.reports.instructor.lineOffset);var o='File <code class="filename">"'.concat(e.filename,'"</code>, '),s='on line <code class="lineno">'.concat(i,"</code>, "),r="<module>"!==e.scope&&void 0!==e.scope?"in scope ".concat(e.scope):"",a="";return void 0!==e.source&&(a="\n<pre><code>".concat(e.source,"</code></pre>")),o+s+r+a})).join("\n<br>"),r="".concat(r)),s+"\n"+r}},{key:"presentInternalError",value:function(e,t){this.main.model.execution.feedback.category("internal"),this.main.model.execution.feedback.label("Internal Error");var n="Error in instructor feedback. Please show the following to an instructor:<br>\n";n+=this.convertSkulptError(e,t),this.main.model.execution.feedback.message(n),this.notifyFeedbackUpdate()}}])&&i(n.prototype,o),s&&i(n,s),t}()}).call(this,n(5))},function(e,t,n){"use strict";(function(e){n.d(t,"b",(function(){return p})),n.d(t,"a",(function(){return F}));var i=n(1);function o(e){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function s(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&r(e,t)}function r(e,t){return(r=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function a(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,i=c(e);if(t){var o=c(this).constructor;n=Reflect.construct(i,arguments,o)}else n=i.apply(this,arguments);return l(this,n)}}function l(e,t){if(t&&("object"===o(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function c(e){return(c=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function u(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function d(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function f(e,t,n){return t&&d(e.prototype,t),n&&d(e,n),e}var p="\n    <div class='col-md-6 blockpy-panel blockpy-console'\n          role=\"region\" aria-label=\"Console\"\n          data-bind=\"class: ui.console.size\">\n          \n        \x3c!-- Feedback/Trace Visibility Control --\x3e\n        <button type='button'\n                class='btn btn-sm btn-outline-secondary float-right blockpy-show-feedback'\n                data-bind=\"hidden: ui.secondRow.isConsoleShowVisible, click: ui.secondRow.advanceState\">\n            <span class='fas fa-eye'></span>\n        </button>\n          \n        <strong>控制台:</strong>\n        \n        <div class='blockpy-printer blockpy-printer-default'>\n        </div>\n        \n     </div>",m="text",h="plot",b="image",y="turtle",v="start_eval",g="value",k="input",S=function(){function t(n,i,o){u(this,t),this.main=n,this.type=i,this.content=o,this.origin={filename:Sk.currFilename,step:n.components.engine.executionBuffer.step,line:n.components.engine.executionBuffer.line},this.html=e("<div></div>",{class:"blockpy-printer-output","data-container":n.model.configuration.attachmentPoint,"data-toggle":"tooltip","data-placement":"auto","data-step":this.origin.step,title:"Step "+this.origin.step+", Line "+this.origin.line}),this.visible=!n.model.display.mutePrinter(),this.index=0}return f(t,[{key:"toSkulpt",value:function(){return Sk.ffi.remapToPy(this.content)}},{key:"delete",value:function(){this.html.remove()}}]),t}(),_=function(t){s(i,t);var n=a(i);function i(e){var t;return u(this,i),(t=n.call(this,e,y)).html.addClass("blockpy-console-turtle-output"),t}return f(i,[{key:"render",value:function(t){if(this.visible){t.prepend(this.html);this.html.position().top;e("html").scrollTop(0)}}}]),i}(S),w=function(e){s(n,e);var t=a(n);function n(e,i){var o;return u(this,n),(o=t.call(this,e,b,i)).html.addClass("blockpy-console-image-output"),o}return f(n,[{key:"render",value:function(e){this.visible&&(console.log(this.content),this.html.append(this.content),e.append(this.html))}}]),n}(S),x=function(e){s(n,e);var t=a(n);function n(e,i){var o;return u(this,n),(o=t.call(this,e,h,i)).html.addClass("blockpy-console-plot-output"),o}return f(n,[{key:"render",value:function(e){this.visible&&e.append(this.html)}}]),n}(S),E=function(t){s(o,t);var n=a(o);function o(){return u(this,o),n.apply(this,arguments)}return f(o,[{key:"addContent",value:function(e){this.content=this.content+e}},{key:"render",value:function(t){if(this.visible){var n=Object(i.b)(this.content);(!n||n.trim().length<=0)&&(n="\n");var o=e("<samp></samp>",{html:n});this.html.append(o),t.append(this.html),this.html.tooltip()}}}]),o}(S),O=function(t){s(o,t);var n=a(o);function o(e,t){return u(this,o),n.call(this,e,g,t)}return f(o,[{key:"render",value:function(t){if(this.visible){var n=Object(i.b)(this.content),o=e("<code></code>",{html:n});this.html.append(o),t.append(this.html),this.html.tooltip()}}}]),o}(S),R=function(t){s(o,t);var n=a(o);function o(e,t){var i;return u(this,o),(i=n.call(this,e,k,t)).visible=!0,i}return f(o,[{key:"render",value:function(t){if(this.visible){var n=e("<input type='text' />"),o=e("<button></button>",{html:"Enter"}),s=e("<div></div>",{class:"blockpy-console-input"});s.append(n),s.append(o);var r=e("<div></div>");if("\n"!==this.content){var a=Object(i.b)(this.content),l=e("<samp></samp>",{html:a});r.append(l)}return r.append(e("<br>")).append(s),this.html.append(r),t.append(this.html),this.makeInteractive(n,o)}return""}},{key:"makeInteractive",value:function(e,t){var n,i=this,o=new Promise((function(e){n=e})),s=this.main.model.execution.inputIndex(),r=function(){var o=e.val();Sk.queuedInput.push(o),i.main.model.execution.inputIndex(s+1),i.main.model.execution.input().push(o),n(o),e.prop("disabled",!0),t.prop("disabled",!0),i.html.tooltip()};if(t.click(r),e.keyup((function(e){13===e.keyCode&&r()})),e.focus(),s<this.main.model.execution.input().length){var a=this.main.model.execution.input()[s];return e.val(a),this.main.model.execution.inputIndex(s+1),new Promise((function(n){e.prop("disabled",!0),t.prop("disabled",!0),i.html.tooltip(),n(a)}))}return o}}]),o}(S),T=function(e){s(n,e);var t=a(n);function n(e){return u(this,n),t.call(this,e,"Evaluate:")}return n}(R),I=function(t){s(i,t);var n=a(i);function i(t){var o;return u(this,i),(o=n.call(this,t,v)).html.append(e('\n<button type="button" class="btn btn-sm btn-outline float-right blockpy-btn-eval">\n    Evaluate\n</button>')),o.html.click((function(){o.main.model.ui.execute.evaluate(),o.delete()})),o}return f(i,[{key:"render",value:function(e){e.append(this.html)}}]),i}(S),F=function(){function t(e,n){u(this,t),this.main=e,this.tag=n,this.printerTag=n.find(".blockpy-printer"),this.MINIMUM_WIDTH=200,this.MINIMUM_HEIGHT=200,this.DEFAULT_HEIGHT=this.printerTag.height(),this.main.model.display.previousConsoleHeight(this.DEFAULT_HEIGHT),this.output=this.main.model.execution.output,this.settings={},this.clear()}return f(t,[{key:"clear",value:function(){this.output.removeAll(),this.lineBuffer=null,this.plotBuffer=null,this.printerTag.empty(),this.main.model.display.previousConsoleHeight()===this.printerTag.height()&&(this.printerTag.height(this.DEFAULT_HEIGHT),this.main.model.display.previousConsoleHeight(this.printerTag.height())),this.turtleLine=null,Sk.TurtleGraphics={target:this.getTurtleLine.bind(this),width:this.getWidth(),height:this.getHeight(),assets:this.loadAsset.bind(this)}}},{key:"loadAsset",value:function(e){return e}},{key:"getTurtleLine",value:function(){if(null===this.turtleLine&&(this.turtleLine=new _(this.main),this.turtleLine.render(this.printerTag),this.main.model.display.previousConsoleHeight()===this.printerTag.height())){var e=this.printerTag.width();this.printerTag.height(e),this.main.model.display.previousConsoleHeight(this.printerTag.height()),Sk.TurtleGraphics.height=e-40}return this.turtleLine.html[0]}},{key:"finishTurtles",value:function(){if(this.main.model.assignment.settings.saveTurtleOutput()){var e=this.turtleLine.html.find("canvas").last()[0],t=(e.getContext("2d"),new Image,e.toDataURL("image/png"));this.main.components.server.saveImage("turtle_output",t)}}},{key:"newTurtle",value:function(){return this}},{key:"getWidth",value:function(){return Math.max(this.MINIMUM_WIDTH,this.printerTag.width()-40)}},{key:"getHeight",value:function(){return Math.max(this.MINIMUM_HEIGHT,this.printerTag.height()+40)}},{key:"isMuted",value:function(){return this.main.model.display.mutePrinter()}},{key:"stepPrinter",value:function(t,n){this.printerTag.find(".blockpy-printer-output").each((function(){e(this).attr("data-step")<=t?e(this).show():e(this).hide()}))}},{key:"print",value:function(e){if(e){var t=!1;"\n"===e.charAt(e.length-1)&&(t=!0);var n=e.split("\n");null===this.lineBuffer?this.lineBuffer=new E(this.main,m,n[0]):this.lineBuffer.addContent(n[0]);for(var i=1;i<n.length-1;i++)this.output.push(this.lineBuffer),this.lineBuffer.render(this.printerTag),this.lineBuffer=new E(this.main,m,n[i]);t&&(this.output.push(this.lineBuffer),this.lineBuffer.render(this.printerTag),this.lineBuffer=null)}}},{key:"plot",value:function(e){return this.plotBuffer=new x(this.main,e),this.plotBuffer.render(this.printerTag),this.plotBuffer}},{key:"printPILImage",value:function(e){return console.log("TEST",e.image),this.imageBuffer=new w(this.main,e.image),this.imageBuffer.render(this.printerTag),this.imageBuffer}},{key:"printValue",value:function(e){var t=new O(this.main,e);return t.render(this.printerTag),t}},{key:"input",value:function(e){return this.inputBuffer=new R(this.main,e),this.inputBuffer.render(this.printerTag)}},{key:"evaluate",value:function(){return this.inputBuffer=new T(this.main),this.inputBuffer.render(this.printerTag)}},{key:"beginEval",value:function(){return new I(this.main).render(this.printerTag)}},{key:"scrollToBottom",value:function(){this.tag.animate({scrollTop:this.tag.prop("scrollHeight")-this.tag.prop("clientHeight")},500)}}]),t}()}).call(this,n(5))},function(e,n){e.exports=t},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var i=function(e){var t;function n(e,t){this.lastResult=t,this.lastError=e}t={__name__:"image"},Sk.PIL||(Sk.PIL={assets:{}}),n.prototype.then=function(e){if(this.lastError)return this;try{this.lastResult=e(this.lastResult)}catch(e){this.lastResult=void 0,this.lastError=e}return this.lastResult instanceof Promise?this.lastResult:this},n.prototype.catch=function(e){if(this.lastError)try{this.lastResult=e(this.lastError),this.lastError=void 0}catch(e){this.lastResult=void 0,this.lastError=e}return this.lastResult instanceof Promise?this.lastResult:this};function i(e){return new Promise((function(t,n){if(void 0!==Sk.PIL.assets[e])t(Sk.PIL.assets[e]);else{var i=new Image;i.crossOrigin="Anonymous",i.onload=function(){Sk.PIL.assets[e]=i,t(i)},i.onerror=function(){n(e)},i.src=e}}))}return t.Image=Sk.misceval.buildClass(t,(function(e,t){t.__init__=new Sk.builtin.func((function(e,t){Sk.builtin.pyCheckArgs("__init__",arguments,2,2),Sk.builtin.pyCheckType("file_or_url","string",Sk.builtin.checkString(t)),e.file_or_url=t;var n=i(Sk.ffi.remapToJs(t)),o=new Sk.misceval.Suspension;return e.image=Sk.builtin.none.none$,o.resume=function(){if(o.data.error)throw o.data.error},o.data={type:"Sk.promise",promise:n.then((function(t){e.image=t,e.canvas=document.createElement("canvas"),e.canvas.width=e.image.width,e.canvas.height=e.image.height,e.canvas.getContext("2d").drawImage(e.image,0,0,e.image.width,e.image.height),e.pixels=e.canvas.getContext("2d").getImageData(0,0,e.image.width,e.image.height).data}),(function(t){throw e.image="",t}))},o})),t.show=new Sk.builtin.func((function(e){if(void 0===Sk.console)throw new Sk.builtin.NameError("Can not resolve drawing area. Sk.console is undefined!");var t={image:e.image,file_or_url:e.file_or_url};Sk.console.printPILImage(t)})),t.flip=new Sk.builtin.func((function(e){if(e.image.style.transform="scaleX(-1)",void 0===Sk.console)throw new Sk.builtin.NameError("Can not resolve drawing area. Sk.console is undefined!");return e}))}),"Image",[]),t}},function(e,t,n){"use strict";n.d(t,"a",(function(){return ke}));var i=n(0),o=n(1);function s(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var r="let $builtinmodule = function(mod){ return mod; }",a=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.main=t,this.filename=null,this.code=null,this.sysmodules=void 0}var t,n,i;return t=e,i=[{key:"inputMockFunction",value:function(){return Sk.queuedInput.length?Sk.queuedInput.pop():""}}],(n=[{key:"use",value:function(e){var t=this;return this.engine=e,Sk.executionReports=this.main.model.execution.reports,Sk.console=this.main.components.console,Sk.queuedInput=[],Sk.configure(this.getSkulptOptions()),Sk.inBrowser=this.openFile.bind(this),Sk.requestsGet=function(e,n,i){return t.openURL(e,n,i)},this}},{key:"getSkulptOptions",value:function(){return{__future__:Sk.python3,read:this.importFile.bind(this),filewrite:this.writeFile.bind(this),output:this.print.bind(this),inputfun:this.input.bind(this),inputfunTakesPrompt:!0,imageProxy:this.getImageProxy.bind(this),retainGlobals:!0}}},{key:"importFile",value:function(e){console.warn("Unimplemented method!")}},{key:"openURL",value:function(e,t,n){var i=this.main.components.fileSystem.getFile("?mock_urls.blockpy");if(null==i)throw new Sk.builtin.IOError("Cannot access url: URL Data was not made available for this assignment");for(var o in i=JSON.parse(i.handle()))if(i.hasOwnProperty(o))for(var s=0;s<i[o].length;s+=1)if(i[o][s]===e)return this.main.components.fileSystem.readFile(o);throw new Sk.builtin.IOError("Cannot access url: "+e+" was not made available for this assignment")}},{key:"openFile",value:function(){console.warn("Unimplemented method!")}},{key:"writeFile",value:function(){console.warn("Unimplemented method!")}},{key:"print",value:function(e){this.main.components.console.print(e)}},{key:"input",value:function(){console.warn("Unimplemented method!")}},{key:"clearInput",value:function(){this.main.model.display.clearInputs()&&this.main.model.execution.input([]),this.main.model.execution.inputIndex(0)}},{key:"getImageProxy",value:function(e){return e}},{key:"step",value:function(){}},{key:"lastStep",value:function(){}},{key:"isForbidden",value:function(e){return!1}},{key:"success",value:function(e){throw new Error("Abstract success execution")}},{key:"failure",value:function(e){throw new Error("Abstract failure execution")}},{key:"dummyOutSandbox",value:function(){}}])&&s(t.prototype,n),i&&s(t,i),e}();function l(e){return(l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function c(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function u(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function d(e,t,n){return(d="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var i=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=h(e)););return e}(e,t);if(i){var o=Object.getOwnPropertyDescriptor(i,t);return o.get?o.get.call(n):o.value}})(e,t,n||e)}function f(e,t){return(f=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function p(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,i=h(e);if(t){var o=h(this).constructor;n=Reflect.construct(i,arguments,o)}else n=i.apply(this,arguments);return m(this,n)}}function m(e,t){if(t&&("object"===l(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function h(e){return(h=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var b="var $builtinmodule = "+function(){var e={},t=Sk.builtin.none.none$,n=null;e.timeit=new Sk.builtin.func((function(e){var t;Sk.builtin.pyCheckArgs("timeit",arguments,1,1),t=null===n?0:Date.now()-n,console.log(Sk.ffi.remapToJs(e),t/1e3),n=Date.now()})),e.console_log=new Sk.builtin.func((function(){console.log(Array.prototype.slice.call(arguments).map(Sk.ffi.remapToJs))})),e.console_debug=new Sk.builtin.func((function(){console.log(arguments)})),e.get_output=new Sk.builtin.func((function(){if(Sk.builtin.pyCheckArgs("get_output",arguments,0,0),Sk.executionReports.student.success){var e=Sk.executionReports.student.output();return e=e.map((function(e){return e.toSkulpt()})),new Sk.builtin.list(e)}return new Sk.builtin.list([])})),e.reset_output=new Sk.builtin.func((function(){return Sk.builtin.pyCheckArgs("reset_output",arguments,0,0),Sk.executionReports.student.success&&Sk.executionReports.student.output.removeAll(),Sk.builtin.none.none$})),e.get_program=new Sk.builtin.func((function(){return Sk.builtin.pyCheckArgs("get_program",arguments,0,0),Sk.ffi.remapToPy(Sk.executionReports.verifier.code)})),e.get_evaluation=new Sk.builtin.func((function(){return Sk.builtin.pyCheckArgs("get_evaluation",arguments,0,0),Sk.ffi.remapToPy(Sk.executionReports.student.evaluation||"")})),e.trace_lines=new Sk.builtin.func((function(){if(Sk.executionReports.student.success){var e=Sk.executionReports.student.realLines;return Sk.ffi.remapToPy(e)}return new Sk.builtin.list([])})),e.get_student_error=new Sk.builtin.func((function(){if(Sk.builtin.pyCheckArgs("get_student_error",arguments,0,0),Sk.executionReports.student.success)return new Sk.builtin.tuple([t,t]);var e=Sk.executionReports.student.error,n={};return e&&e.traceback&&e.traceback.length>0?n.line=e.traceback[0].lineno:e=t,n=Sk.ffi.remapToPy(n),new Sk.builtin.tuple([e,n])})),e.had_execution_time_error=new Sk.builtin.func((function(){return Sk.builtin.pyCheckArgs("had_execution_time_error",arguments,0,0),!Sk.executionReports.student.success&&Sk.executionReports.student.error&&"TimeLimitError"===Sk.executionReports.student.error.tp$name}));var i=void 0;return e.limit_execution_time=new Sk.builtin.func((function(){Sk.builtin.pyCheckArgs("limit_execution_time",arguments,0,0),i=Sk.execLimit,Sk.execLimitFunction&&(Sk.execLimit=Sk.execLimitFunction(),Sk.execStart=Date.now())})),e.unlimit_execution_time=new Sk.builtin.func((function(){Sk.builtin.pyCheckArgs("unlimit_execution_time",arguments,0,0),Sk.execLimit=i,Sk.execStart=Date.now()})),e.suppress_scrolling=new Sk.builtin.func((function(){Sk.builtin.pyCheckArgs("suppress_scrolling",arguments,0,0),Sk.executionReports.instructor.scrolling=!0})),e.get_plots=new Sk.builtin.func((function(){if(Sk.builtin.pyCheckArgs("get_plots",arguments,0,0),Sk.executionReports.student.success){var e=Sk.executionReports.student.output();return e=e.filter((function(e){return"plot"===e.type})).map((function(e){return{data:e.content.map((function(e){var t={type:e.type,label:""};return"line"===e.type||"scatter"===e.type?(t.x=e.data.map((function(e){return e.x})),t.y=e.data.map((function(e){return e.y}))):"hist"===e.type&&(t.values=e.data),t})),xlabel:"",ylabel:"",title:"",legend:!1}})),Sk.ffi.remapToPy(e)}return Sk.ffi.remapToPy([])})),e.StudentData=Sk.misceval.buildClass(e,(function(e,t){t.__init__=new Sk.builtin.func((function(e){var t=new Sk.builtin.dict;if(Sk.abstr.sattr(e,new Sk.builtin.str("data"),t,!0),e.module=Sk.executionReports.student.results,void 0!==e.module)for(var n in e.module=e.module.$d,e.module)e.module.hasOwnProperty(n)&&Sk.abstr.objectSetItem(t,Sk.ffi.remapToPy(Sk.unfixReserved(n)),e.module[n]);else e.module={};return Sk.builtin.none.none$}));var n=function(e){Sk.builtin.pyCheckArgsLen("call",arguments.length,1,1/0,!0,!0);var t=Array.prototype.slice.call(arguments,1),n=new Sk.builtins.dict(e),i=t[0],o=t[1];t=t.slice(2);var s=n.mp$lookup(new Sk.builtin.str("inputs"));void 0!==s&&((s=Sk.ffi.remapToJs(s)).constructor===Array?s.forEach((function(e){Sk.queuedInput.push(e)})):Sk.queuedInput.push(input));var r=i.tp$getattr(new Sk.builtin.str("data")),a=r.mp$lookup(o),l=a.tp$call(t);return l};n.co_kwargs=!0,n.co_name=new Sk.builtin.str("call"),t.call_$rn$=new Sk.builtin.func(n),t.__repr__=new Sk.builtin.func((function(e){return new Sk.builtin.str("")})),t.get_names_by_type=new Sk.builtin.func((function(e,t,n){Sk.builtin.pyCheckArgs("get_names_by_type",arguments,2,3),void 0===n?n=!0:(Sk.builtin.pyCheckType("exclude_builtins","boolean",Sk.builtin.checkBool(n)),n=Sk.ffi.remapToJs(n));var i=[];for(var o in e.module)if(e.module.hasOwnProperty(o)&&e.module[o].tp$name===t.tp$name){if(n&&o.startsWith("__"))continue;i.push(Sk.ffi.remapToPy(Sk.unfixReserved(o)))}return new Sk.builtin.list(i)})),t.get_values_by_type=new Sk.builtin.func((function(e,t,n){Sk.builtin.pyCheckArgs("get_values_by_type",arguments,2,3),void 0===n?n=!0:(Sk.builtin.pyCheckType("exclude_builtins","boolean",Sk.builtin.checkBool(n)),n=Sk.ffi.remapToJs(n));var i=[];for(var o in e.module)if(e.module.hasOwnProperty(o)&&e.module[o].tp$name===t.tp$name){if(n&&o.startsWith("__"))continue;i.push(e.module[o])}return new Sk.builtin.list(i)}))}),"StudentData"),e.student=Sk.misceval.callsimOrSuspend(e.StudentData),e.get_student_data=new Sk.builtin.func((function(){return Sk.builtin.pyCheckArgs("get_student_data",arguments,0,0),e.student})),e.set_instructions=new Sk.builtin.func((function(e){Sk.builtin.pyCheckArgs("set_instructions",arguments,1,2),e=Sk.ffi.remapToJs(e),Sk.executionReports.model.display.changedInstructions(e)})),e.get_model_info=new Sk.builtin.func((function(e){Sk.builtin.pyCheckArgs("get_model_info",arguments,1,1);var t=Sk.executionReports.model;e=Sk.ffi.remapToJs(e).split(".");for(var n=0;n<e.length;n++)t=t[e[n]];return Sk.ffi.remapToPy(t())})),e}.toString(),y=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&f(e,t)}(s,e);var t,n,i,o=p(s);function s(){return c(this,s),o.apply(this,arguments)}return t=s,(n=[{key:"use",value:function(e){var t=this;d(h(s.prototype),"use",this).call(this,e),Sk.execLimitFunction=function(){return t.main.model.assignment.settings.disableTimeout()?1/0:7e3},Sk.execLimit=Sk.execLimitFunction(),Sk.afterSingleExecution=null,this.main.model.display.mutePrinter(!0),Sk.queuedInput=[],Sk.builtinFiles.files["src/lib/utility/__init__.js"]=b,Sk.builtinFiles.files["src/lib/coverage.py"]='\n"""\nHideous fill-in replacement for Coverage, leveraging some magic from the\nUtility function. The data this returns is false - it doesn\'t actually\ndescribe the missing lines and all lines; it just describes the traced lines.\nBut since Pedal doesn\'t need the other two, it works out fine when you do:\n\nstatements - missing\n"""\n\nimport utility\n\nclass Coverage:\n    def start(self):\n        pass\n\n    def stop(self):\n        pass\n\n    def save(self):\n        pass\n\n    def _analyze(self, filename: str):\n        lines = set(utility.trace_lines())\n        # lines will be the lines that were actually executed\n        return Analysis(None, len(lines), None, set(), lines)\n\n\nclass Numbers:\n    def __init__(self, n_missing, n_statements, pc_covered):\n        self.n_missing = n_missing\n        self.n_statements = n_statements\n        self.pc_covered = pc_covered\n\n\nclass Analysis:\n    def __init__(self, n_missing, n_statements, pc_covered, missing, statements):\n        self.missing = missing\n        self.statements = statements\n        self.numbers = Numbers(n_missing, n_statements, pc_covered)\n\n\nclass python:\n    def get_python_source(self):\n        return None\n',Sk.builtinFiles.files["./_instructor/__init__.js"]=r,this.sysmodules=this.main.model.execution.instructor.sysmodules;var n=new Sk.builtin.str("__main__");return void 0!==this.sysmodules&&this.sysmodules.quick$lookup(n)&&this.sysmodules.del$item(n),this}},{key:"openFile",value:function(e){var t=this.main.components.fileSystem.searchForFile(e,!1);if(void 0===t)throw new Sk.builtin.OSError("File not found: "+e);return t.contents()}},{key:"importFile",value:function(e){if("./answer.py"===e)return this.main.model.submission.code();if("./_instructor/on_run.py"===e)return this.main.model.assignment.onRun();if("./_instructor/on_eval.py"===e)return this.main.model.assignment.onEval()||"";if("./_instructor/__init__.js"===e)return r;if(void 0===Sk.builtinFiles)throw new Sk.builtin.OSError("Built-in modules not accessible.");if(void 0!==Sk.builtinFiles.files[e])return Sk.builtinFiles.files[e];var t=this.main.components.fileSystem.searchForFile(e,!1);if(void 0===t)throw new Sk.builtin.OSError("File not found: '"+e+"'");return t.contents()}},{key:"input",value:function(e){if(this.main.model.execution.inputIndex()<this.main.model.execution.input().length){var t=this.main.model.execution.inputIndex(),n=this.main.model.execution.input()[t];return this.main.model.execution.inputIndex(t+1),n}return"ApplePie"}}])&&u(t.prototype,n),i&&u(t,i),s}(a);function v(e){return(v="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function g(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function k(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function S(e,t,n){return(S="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var i=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=E(e)););return e}(e,t);if(i){var o=Object.getOwnPropertyDescriptor(i,t);return o.get?o.get.call(n):o.value}})(e,t,n||e)}function _(e,t){return(_=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function w(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,i=E(e);if(t){var o=E(this).constructor;n=Reflect.construct(i,arguments,o)}else n=i.apply(this,arguments);return x(this,n)}}function x(e,t){if(t&&("object"===v(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function E(e){return(E=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var O=/\r\n|\r|\n/,R=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_(e,t)}(a,e);var t,n,s,r=w(a);function a(){return g(this,a),r.apply(this,arguments)}return t=a,(n=[{key:"use",value:function(e){S(E(a.prototype),"use",this).call(this,e),this.filename="_instructor.on_run",this.code=this.main.model.assignment.onRun();var t=this.main.model.assignment.settings.disableTifa(),n=this.main.model.execution.reports,i=this.main.model.submission.code();this.dummyOutSandbox();var s=this.code;return s.split(O).length,s=function(e,t,n,i){var s=JSON.stringify(e);return Object(o.d)(Object(o.d)(i?e:"pass")),"\n# Support our sysmodules hack by clearing out any lingering old data\nfrom pedal.core.report import MAIN_REPORT\nMAIN_REPORT.clear()\n\nfrom cisc108 import student_tests\nstudent_tests.reset()\n\nfrom utility import *\n\n# Load in some commonly used tools\nfrom pedal.cait.cait_api import parse_program\nfrom pedal.sandbox.commands import *\nfrom pedal.core.commands import *\n\nfrom pedal.environments.blockpy import setup_environment\n# Do we execute student's code?\nskip_run = get_model_info('assignment.settings.disableInstructorRun')\ninputs = None if skip_run else get_model_info('execution.input')\n\n# Initialize the BlockPy environment\npedal = setup_environment(skip_tifa=".concat(n?"True":"False",",\n                          skip_run=skip_run,\n                          inputs=inputs,\n                          main_file='answer.py',\n                          main_code=").concat(s,")\nstudent = pedal.fields['student']\n\n# TODO: Refactor resolver to return instructions\n# Monkey-patch questions\n#from pedal import questions\n#questions.show_question = set_instructions\n\n# Run the actual instructor code\n").concat(t,'\n\n# Resolve everything\nfrom pedal.resolvers.simple import resolve\nfinal = resolve()\nSUCCESS = final.success\nSCORE = final.score\nCATEGORY = final.category\nLABEL = final.title\nMESSAGE = final.message\nDATA = final.data\nHIDE = final.hide_correctness\n\n# Handle questions\nif final.instructions:\n    set_instructions(final.instructions[-1].message)\n    \n# Handle positive feedback\nPOSITIVE = []\nfor positive in final.positives:\n    message = positive.message\n    if not positive:\n        message = positive.else_message\n    POSITIVE.append({\n        "title": positive.title,\n        "label": positive.label,\n        "message": message\n    })\n    \n# Handle system messages\nfor system in final.systems:\n    if system.label == \'log\':\n        console_log(system.title, system.message);\n    if system.label == \'debug\':\n        console_debug(system.title, system.message);\n\n')}(i,s,t,!n.parser.empty&&n.verifier.success),n.instructor={compliments:[],filename:"./_instructor/on_run.py",code:s,lineOffset:0},this.code=s,Sk.retainGlobals=!1,this}},{key:"success",value:function(e){this.main.model.execution.instructor.globals=Sk.globals,this.main.model.execution.instructor.sysmodules=Sk.sysmodules,Sk.globals={};var t=e.$d.on_run.$d;this.main.components.feedback.presentFeedback(t),this.main.model.execution.reports.instructor.success=!0;var n=Sk.ffi.remapToJs(t.SUCCESS);this.main.model.submission.correct(n||this.main.model.submission.correct());var o=Sk.ffi.remapToJs(t.SCORE);o=Math.max(0,Math.min(1,o));var s=this.main.model.submission.score();o=Math.max(s,o),this.main.model.submission.score(o);var r=Sk.ffi.remapToJs(t.HIDE);if(this.main.components.server.updateSubmission(o,n,r,!1),this.main.model.status.onExecution(i.b.READY),!Sk.executionReports.instructor.scrolling)try{this.main.components.console.scrollToBottom()}catch(e){}}},{key:"failure",value:function(e){console.log("OnRun failure");var t=this.main.model.execution.reports;"GracefulExit"===e.tp$name?(t.instructor.success=!0,this.main.model.status.onExecution(i.b.READY)):(this.main.model.status.onExecution(i.b.FAILED),console.error(e),this.main.components.feedback.presentInternalError(e,this.filename))}}])&&k(t.prototype,n),s&&k(t,s),a}(y);function T(e){return(T="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function I(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function F(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function C(e,t,n){return(C="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var i=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=M(e)););return e}(e,t);if(i){var o=Object.getOwnPropertyDescriptor(i,t);return o.get?o.get.call(n):o.value}})(e,t,n||e)}function P(e,t){return(P=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function A(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,i=M(e);if(t){var o=M(this).constructor;n=Reflect.construct(i,arguments,o)}else n=i.apply(this,arguments);return D(this,n)}}function D(e,t){if(t&&("object"===T(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function M(e){return(M=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var j=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&P(e,t)}(s,e);var t,n,i,o=A(s);function s(){return I(this,s),o.apply(this,arguments)}return t=s,(n=[{key:"use",value:function(e){var t=this;return C(M(s.prototype),"use",this).call(this,e),this.main.model.settings,Sk.execLimitFunction=function(){return t.main.model.assignment.settings.disableTimeout()?1/0:5e3},Sk.execLimit=Sk.execLimitFunction(),Sk.afterSingleExecution=this.step.bind(this),this.main.model.display.mutePrinter(!1),Sk.builtinFiles.files["src/lib/utility/__init__.js"]=r,this}},{key:"openFile",value:function(e){var t=this.main.components.fileSystem.searchForFile(e,!0);if(void 0===t)throw new Sk.builtin.OSError("File not found: "+e);return t.contents()}},{key:"importFile",value:function(e){if(this.isForbidden(e))throw"File not accessible: '"+e+"'";if("./answer.py"===e)return this.main.model.submission.code();if(void 0===Sk.builtinFiles)throw new Sk.builtin.OSError("Built-in modules not accessible.");if(void 0!==Sk.builtinFiles.files[e])return Sk.builtinFiles.files[e];var t=this.main.components.fileSystem.searchForFile(e,!0);if(void 0===t)throw new Sk.builtin.OSError("File not found: '"+e+"'");return t.contents()}},{key:"input",value:function(e){return this.main.components.console.input(e)}},{key:"isForbidden",value:function(e){return e.startsWith("src/lib/utility/")||e.startsWith("src/lib/pedal/")||e.startsWith("./_instructor/")}},{key:"step",value:function(e,t,n,i,o,s){if("answer.py"===o){var r=this.engine.executionBuffer.step,a=this.main.components.trace.parseGlobals(a);this.engine.executionBuffer.trace.push({step:r,filename:o,line:n,column:i,properties:a.properties,modules:a.modules,isDocstring:s}),this.engine.executionBuffer.step=r+1,this.engine.executionBuffer.line=n}}},{key:"lastStep",value:function(){var e=this.main.model.execution;e.student.currentTraceData(this.engine.executionBuffer.trace),e.student.currentStep(this.engine.executionBuffer.step),e.student.lastStep(this.engine.executionBuffer.step),e.student.currentLine(this.engine.executionBuffer.line),e.student.lastLine(this.engine.executionBuffer.line),e.student.currentTraceStep(this.engine.executionBuffer.step)}},{key:"getLines",value:function(e){var t=new Set;return function e(n){void 0!==n.lineno&&t.add(n.lineno),n.body&&n.body.forEach((function(t){return e(t)})),n.orelse&&n.orelse.forEach((function(t){return e(t)})),n.finalbody&&n.finalbody.forEach((function(t){return e(t)}))}(e),Array.from(t)}},{key:"updateParse",value:function(){var e,t=this.main.model.execution.reports,n=[];try{var i=Sk.parse(this.filename,this.code);e=Sk.astFromParse(i.cst,this.filename,i.flags),n=this.getLines(e)}catch(e){return t.parser={success:!1,error:e,empty:!0,lines:n},console.error(e),console.log(this.filename,this.code),!1}return t.parser={success:!0,ast:e,empty:0===e.body.length,lines:n},!0}},{key:"showErrors",value:function(){var e=this.main.model.execution.reports;e.student.success?this.main.components.feedback.clear():this.main.components.feedback.presentRunError(e.student.error)}},{key:"provideSecretError",value:function(){var e=this,t=this.main.model.execution.reports,n=this.main.components.feedback;if(!t.student.success){var i=this.main.model.configuration.container.find(".blockpy-student-error"),o=n.presentRunError(t.student.error,!0);i.attr("title","Click to see Original Error"),i.tooltip({trigger:"hover",container:this.main.model.configuration.attachmentPoint}),i.click((function(){return e.main.components.dialog.ERROR_SHOW_STUDENT_ERROR(o)})),i.show()}}}])&&F(t.prototype,n),i&&F(t,i),s}(a);function L(e){return(L="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function B(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function N(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function H(e,t,n){return(H="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var i=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=G(e)););return e}(e,t);if(i){var o=Object.getOwnPropertyDescriptor(i,t);return o.get?o.get.call(n):o.value}})(e,t,n||e)}function $(e,t){return($=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function U(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,i=G(e);if(t){var o=G(this).constructor;n=Reflect.construct(i,arguments,o)}else n=i.apply(this,arguments);return V(this,n)}}function V(e,t){if(t&&("object"===L(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function G(e){return(G=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var Y=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&$(e,t)}(r,e);var t,n,o,s=U(r);function r(){return B(this,r),s.apply(this,arguments)}return t=r,(n=[{key:"use",value:function(e){return this.main.model.execution.feedback.message("Running..."),this.filename="answer",this.code=this.main.model.submission.code(),this.main.components.server.saveFile("answer.py",this.code,null),this.main.components.server.logEvent("Compile","","","","answer.py"),H(G(r.prototype),"use",this).call(this,e),e.reset(),this.updateParse(),this.main.model.execution.reports.verifier={success:Boolean(this.code.trim()),code:this.code},Sk.retainGlobals=!1,this.clearInput(),this}},{key:"success",value:function(e){var t=this;console.log("Run success");var n={inputs:this.main.model.execution.input().join("\n"),outputs:this.main.model.execution.output().map((function(e){return e.content})).join("\n")};this.main.components.server.logEvent("Run.Program","","",JSON.stringify(n),"answer.py"),this.main.model.display.dirtySubmission(!1),this.main.components.console.finishTurtles(),this.main.model.status.onExecution(i.b.READY),this.main.model.execution.student.globals(Sk.globals),Sk.globals={};var o=this.main.model.execution.reports,s=this.filename;return this.main.model.execution.student.results=e,this.main.model.assignment.settings.hideEvaluate()||this.main.components.console.beginEval(),new Promise((function(n,i){t.step(e.$d,e.$d,-1,0,s+".py"),t.lastStep(),o.student={success:!0,trace:t.engine.executionBuffer.trace,lines:t.engine.executionBuffer.trace.map((function(e){return e.line})),realLines:t.engine.executionBuffer.trace.filter((function(e){return!e.isDocstring})).map((function(e){return e.line})),results:e,output:t.main.model.execution.output,input:t.main.model.execution.input},n()}))}},{key:"failure",value:function(e){var t=this;console.log("Run failure"),this.main.model.status.onExecution(i.b.FAILED);var n=this.main.model.execution.reports;return n.parser.success&&n.verifier.success?this.main.components.server.logEvent("Compile.Error","","",e.toString(),"answer.py"):this.main.components.server.logEvent("Run.Program","ProgramErrorOutput","",e.toString(),"answer.py"),new Promise((function(i,o){n.student={success:!1,error:e,lines:t.engine.executionBuffer.trace.map((function(e){return e.line})),realLines:t.engine.executionBuffer.trace.filter((function(e){return!e.isDocstring})).map((function(e){return e.line})),input:t.main.model.execution.input},console.error(e),i()}))}}])&&N(t.prototype,n),o&&N(t,o),r}(j);n(9);function q(e){return(q="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function J(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function W(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function X(e,t,n){return(X="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var i=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=Z(e)););return e}(e,t);if(i){var o=Object.getOwnPropertyDescriptor(i,t);return o.get?o.get.call(n):o.value}})(e,t,n||e)}function K(e,t){return(K=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function z(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,i=Z(e);if(t){var o=Z(this).constructor;n=Reflect.construct(i,arguments,o)}else n=i.apply(this,arguments);return Q(this,n)}}function Q(e,t){if(t&&("object"===q(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function Z(e){return(Z=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var ee=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&K(e,t)}(r,e);var t,n,o,s=z(r);function r(){return J(this,r),s.apply(this,arguments)}return t=r,(n=[{key:"use",value:function(e,t){return this.main.model.execution.feedback.message("Running..."),this.filename="answer",this.code="_ = "+t,Sk.afterSingleExecution=null,X(Z(r.prototype),"use",this).call(this,e),Sk.retainGlobals=!0,Sk.globals=this.main.model.execution.student.globals(),this.main.components.server.logEvent("X-File.Add","","",t,"evaluations"),this.main.components.server.logEvent("Compile","","",this.code,"evaluations"),this}},{key:"success",value:function(e){var t=this;console.log("Eval success"),this.main.components.server.logEvent("X-Evaluate.Program","","","","evaluations"),this.main.model.status.onExecution(i.b.READY),this.main.model.execution.student.globals(Sk.globals),Sk.globals={};var n=this.main.model.execution.reports;return this.filename,this.main.model.execution.student.results=e,this.main.components.console.printValue(Sk.ffi.remapToJs(e.$d._.$r())),new Promise((function(i,o){t.lastStep(),n.student={success:!0,trace:t.engine.executionBuffer.trace,lines:t.engine.executionBuffer.trace.map((function(e){return e.line})),realLines:t.engine.executionBuffer.trace.filter((function(e){return!e.isDocstring})).map((function(e){return e.line})),results:e,output:t.main.model.execution.output,evaluation:t.code},i()}))}},{key:"failure",value:function(e){var t=this;console.log("Eval failure"),this.main.model.status.onExecution(i.b.FAILED);var n=this.main.model.execution.reports;return this.main.components.server.logEvent("Compile.Error","","",e.toString(),"evaluations"),new Promise((function(i,o){n.student={success:!1,error:e,evaluation:t.code},console.error(e),i()}))}}])&&W(t.prototype,n),o&&W(t,o),r}(j);function te(e){return(te="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ne(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function ie(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function oe(e,t,n){return(oe="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var i=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=le(e)););return e}(e,t);if(i){var o=Object.getOwnPropertyDescriptor(i,t);return o.get?o.get.call(n):o.value}})(e,t,n||e)}function se(e,t){return(se=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function re(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,i=le(e);if(t){var o=le(this).constructor;n=Reflect.construct(i,arguments,o)}else n=i.apply(this,arguments);return ae(this,n)}}function ae(e,t){if(t&&("object"===te(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function le(e){return(le=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var ce=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&se(e,t)}(s,e);var t,n,i,o=re(s);function s(){return ne(this,s),o.apply(this,arguments)}return t=s,(n=[{key:"use",value:function(e){return oe(le(s.prototype),"use",this).call(this,e),this.filename="on_change.py",this.code=this.main.model.assignment.onChange(),clearTimeout(this.main.model.display.triggerOnChange),this}}])&&ie(t.prototype,n),i&&ie(t,i),s}(y);function ue(e){return(ue="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function de(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function fe(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function pe(e,t,n){return(pe="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var i=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=ye(e)););return e}(e,t);if(i){var o=Object.getOwnPropertyDescriptor(i,t);return o.get?o.get.call(n):o.value}})(e,t,n||e)}function me(e,t){return(me=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function he(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,i=ye(e);if(t){var o=ye(this).constructor;n=Reflect.construct(i,arguments,o)}else n=i.apply(this,arguments);return be(this,n)}}function be(e,t){if(t&&("object"===ue(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function ye(e){return(ye=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var ve=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&me(e,t)}(a,e);var t,n,s,r=he(a);function a(){return de(this,a),r.apply(this,arguments)}return t=a,(n=[{key:"use",value:function(e){pe(ye(a.prototype),"use",this).call(this,e),this.filename="_instructor.on_eval",this.code=this.main.model.assignment.onEval()||"",this.main.model.assignment.settings.disableTifa();var t=this.main.model.execution.reports,n=this.main.model.execution.reports.student.evaluation||"None";this.dummyOutSandbox();var i=this.code,s=i.split(O).length;return s=(i=function(e,t,n,i){var s=JSON.stringify(e);return Object(o.d)(Object(o.d)(i?e:"None")),"\nfrom utility import *\n\n# Load in some commonly used tools\nfrom pedal.cait.cait_api import parse_program\nfrom pedal.sandbox.commands import *\nfrom pedal.core.commands import *\n\n# Backup the feedback\non_run_feedback = []\nfor feedback in MAIN_REPORT.feedback:\n    on_run_feedback.append(feedback)\nMAIN_REPORT.feedback.clear()\n\nfrom pedal.environments.blockpy import setup_environment\n# Add in evaluated stuff from last time\nstudent = get_sandbox()\n# TODO: What about new inputs since we last ran/evaled?\nMAIN_REPORT.submission.files['evaluation'] = ".concat(s,"\nevaluate(").concat(s,")\n\n# TODO: Refactor resolver to return instructions\n# Monkey-patch questions\n#from pedal import questions\n#questions.show_question = set_instructions\n\n# Run the actual instructor code\n").concat(t,'\n\n# Resolve everything\nfrom pedal.resolvers.simple import resolve\nfinal = resolve()\nSUCCESS = final.success\nSCORE = final.score\nCATEGORY = final.category\nLABEL = final.title\nMESSAGE = final.message\nDATA = final.data\nHIDE = final.hide_correctness\n\n# Handle questions\nif final.instructions:\n    set_instructions(final.instructions[-1].message)\n    \n# Handle positive feedback\nPOSITIVE = []\nfor positive in final.positives:\n    message = positive.message\n    if not positive:\n        message = positive.else_message\n    POSITIVE.append({\n        "title": positive.title,\n        "label": positive.label,\n        "message": message\n    })\n    \n# Handle system messages\nfor system in final.systems:\n    if system.label == \'log\':\n        console_log(system.title, system.message);\n    if system.label == \'debug\':\n        console_debug(system.title, system.message);\n\n')}(n,i,0,!t.parser.empty&&t.verifier.success)).split(O).length-s,t.instructor={compliments:[],filename:"./_instructor/on_eval.py",code:i,lineOffset:s},this.code=i,pe(ye(a.prototype),"use",this).call(this,e),Sk.globals=this.main.model.execution.instructor.globals,this}},{key:"success",value:function(e){console.log("OnEval success"),this.main.model.execution.instructor.globals=Sk.globals,this.main.model.execution.instructor.sysmodules=Sk.sysmodules,console.log(e);var t=e.$d.on_eval.$d;console.log(e.$d),this.main.components.feedback.presentFeedback(t),this.main.model.execution.reports.instructor.success=!0;var n=Sk.ffi.remapToJs(t.SUCCESS);this.main.model.submission.correct(n||this.main.model.submission.correct());var o=Sk.ffi.remapToJs(t.SCORE);o=Math.max(0,Math.min(1,o));var s=this.main.model.submission.score();this.main.model.submission.score(Math.max(s,o));var r=Sk.ffi.remapToJs(t.HIDE);if(this.main.components.server.updateSubmission(o,n,r,!1),this.main.model.status.onExecution(i.b.READY),!Sk.executionReports.instructor.scrolling)try{this.main.components.console.scrollToBottom()}catch(e){}}},{key:"failure",value:function(e){console.log("OnEval failure");var t=this.main.model.execution.reports;"GracefulExit"===e.tp$name?(t.instructor.success=!0,this.main.model.status.onExecution(i.b.READY)):(this.main.model.status.onExecution(i.b.FAILED),console.error(e),this.main.components.feedback.presentInternalError(e,this.filename))}}])&&fe(t.prototype,n),s&&fe(t,s),a}(y);function ge(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var ke=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.main=t,this.executionModel=this.main.model.execution,this.configurations={run:new Y(t),eval:new ee(t),onRun:new R(t),onChange:new ce(t),onEval:new ve(t)},Sk.configure(this.configurations.run.getSkulptOptions()),this.executionBuffer={},this.onExecutionBegin=null,this.onExecutionEnd=null}var t,n,o;return t=e,(n=[{key:"resetReports",value:function(){var e=this.executionModel.reports;e.verifier={},e.parser={},e.student={},e.instructor={},e.model=this.main.model}},{key:"resetStudentModel",value:function(){var e=this.executionModel.student;e.currentStep(null),e.currentTraceStep(0),e.lastStep(0),e.currentLine(null),e.currentTraceData.removeAll(),e.results=null}},{key:"resetExecutionBuffer",value:function(){this.executionBuffer={trace:[],step:0,line:0}}},{key:"reset",value:function(){this.resetStudentModel(),this.resetReports(),this.resetExecutionBuffer(),this.main.components.console.clear(),this.main.components.feedback.clear()}},{key:"delayedRun",value:function(){this.run()}},{key:"run",value:function(){var e=this;this.configuration=this.configurations.run.use(this);var t=this.execute().then(this.configuration.success.bind(this.configuration),this.configuration.failure.bind(this.configuration));this.main.model.assignment.settings.disableFeedback()?t.then(this.configuration.showErrors.bind(this.configuration)):t.then((function(){return e.configuration.provideSecretError(),e.onRun()}))}},{key:"onRun",value:function(){this.configuration=this.configurations.onRun.use(this),this.execute().then(this.configuration.success.bind(this.configuration),this.configuration.failure.bind(this.configuration)).then(this.executionEnd_.bind(this))}},{key:"evaluate",value:function(){var e=this;this.main.model.status.onExecution(i.b.ACTIVE);var t=this.main.components.console.evaluate();console.log(t),t.then((function(t){e.configuration=e.configurations.eval.use(e,t);var n=e.execute().then(e.configuration.success.bind(e.configuration),e.configuration.failure.bind(e.configuration));!e.main.model.assignment.settings.disableFeedback()&&e.main.model.assignment.onEval()?n.then(e.onEval.bind(e)):n.then(e.configuration.showErrors.bind(e.configuration)).then(e.evaluate.bind(e))}))}},{key:"onEval",value:function(){this.configuration=this.configurations.onEval.use(this),this.execute().then(this.configuration.success.bind(this.configuration),this.configuration.failure.bind(this.configuration)).then(this.evaluate.bind(this))}},{key:"onChange",value:function(){this.configuration=this.configurations.onChange.use(this)}},{key:"execute",value:function(){var e=this;return this.main.model.status.onExecution(i.b.ACTIVE),Sk.misceval.asyncToPromise((function(){return Sk.importMainWithBody(e.configuration.filename,!1,e.configuration.code,!0,e.configuration.sysmodules)}))}},{key:"on_change",value:function(){if(!this.main.model.programs.on_change().trim())return!1;this.main.model.execution.status("changing"),this.main.components.server.saveCode();var e=this,t=this.main.components.feedback;e.resetReports(),e.verifyCode(),e.updateParse(),e.runInstructorCode("on_change",!0,(function(n){Sk.executionReports.instructor.success&&(success||"Instructor"===category&&"No errors"===label||t.presentFeedback(category,label,message,line),e.main.components.feedback.presentFeedback(n.$d),e.main.model.execution.status("complete"))})),e.main.components.server.logEvent("engine","on_change")}},{key:"executionEnd_",value:function(){null!==this.onExecutionEnd&&this.onExecutionEnd()}},{key:"executionBegin_",value:function(){null!==this.onExecutionBegin&&this.onExecutionBegin()}}])&&ge(t.prototype,n),o&&ge(t,o),e}()},function(e,t,n){"use strict";n.r(t),function(e){n.d(t,"BlockPy",(function(){return w}));n(20),n(21);var i=n(5),o=n.n(i),s=n(17),r=n(11),a=n(7),l=n(6),c=n(0),u=n(4),d=n(3),f=n(2),p=n(18),m=n(9),h=n(15),b=n(14),y=n(13),v=n(8),g=n(10);n.d(t,"_IMPORTED_COMPLETE_DATASETS",(function(){return g.b})),n.d(t,"_IMPORTED_DATASETS",(function(){return g.c}));var k=n(12),S=n(1);function _(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var w=function(){function t(e,n,i){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),this.initModel(e),void 0!==n&&this.setAssignment(e,n,i),this.initMain()}var n,i,w;return n=t,(i=[{key:"initMain",value:function(){this.initUtilities(),this.initModelMethods(),this.turnOnHacks(),this.initInterface(),this.applyModel(),this.initComponents(),this.makeExtraSubscriptions(),this.start()}},{key:"getSetting",value:function(e,t){return e in this.initialConfiguration_?this.initialConfiguration_[e]:this.localSettings_.has(e)?this.localSettings_.get(e):t}},{key:"initModel",value:function(t){this.localSettings_=new r.a("localSettings"),this.initialConfiguration_=t,this.model={user:{id:e.observable(t["user.id"]),name:e.observable(t["user.name"]),role:e.observable(this.getSetting("user.role","owner")),courseId:e.observable(t["user.course_id"]),groupId:e.observable(t["user.group_id"])},assignment:{id:e.observable(null),name:e.observable("Scratch Canvas"),instructions:e.observable("Welcome to BlockPy. Try editing and running the code below."),url:e.observable(""),type:e.observable(""),startingCode:e.observable(t["assignment.starting_code"]||""),onRun:e.observable(t["assignment.on_run"]||""),onChange:e.observable(t["assignment.on_change"]||null),onEval:e.observable(t["assignment.on_eval"]||null),extraInstructorFiles:e.observableArray([]),extraStartingFiles:e.observableArray([]),forkedId:e.observable(null),forkedVersion:e.observable(null),ownerId:e.observable(null),courseId:e.observable(null),version:e.observable(null),tags:e.observableArray([]),sampleSubmissions:e.observableArray([]),reviewed:e.observable(t["assignment.reviewed"]),public:e.observable(t["assignment.public"]),hidden:e.observable(t["assignment.hidden"]),ipRanges:e.observable(t["assignment.ip_ranges"]),settings:Object(v.c)(t)},submission:{id:e.observable(null),code:e.observable(t["submission.code"]||""),extraFiles:e.observableArray([]),url:e.observable(""),endpoint:e.observable(""),score:e.observable(0),correct:e.observable(!1),version:e.observable(0),submissionStatus:e.observable("Started"),gradingStatus:e.observable("NotReady"),ownerId:e.observable(null)},display:{filename:e.observable(null),instructor:e.observable("true"===this.getSetting("display.instructor","false").toString()),mutePrinter:e.observable(!1),pythonMode:e.observable(this.getSetting("display.python.mode",l.a.SPLIT)),historyMode:e.observable(!1),autoSave:e.observable(!0),bigConsole:e.observable(!1),previousConsoleHeight:e.observable(null),currentConsoleHeight:e.observable(null),secondRowSecondPanel:e.observable(u.a.FEEDBACK),traceExecution:e.observable(!1),loadingDatasets:e.observableArray([]),changedInstructions:e.observable(null),triggerOnChange:null,dirtySubmission:e.observable(!0),fullscreen:e.observable(!1),passcode:e.observable(""),clearInputs:e.observable(!0)},status:{loadAssignment:e.observable(c.b.READY),loadAssignmentMessage:e.observable(""),loadHistory:e.observable(c.b.READY),loadHistoryMessage:e.observable(""),loadFile:e.observable(c.b.READY),loadFileMessage:e.observable(""),loadDataset:e.observable(c.b.READY),loadDatasetMessage:e.observable(""),logEvent:e.observable(c.b.READY),logEventMessage:e.observable(""),saveImage:e.observable(c.b.READY),saveImageMessage:e.observable(""),saveFile:e.observable(c.b.READY),saveFileMessage:e.observable(""),saveAssignment:e.observable(c.b.READY),saveAssignmentMessage:e.observable(""),updateSubmission:e.observable(c.b.READY),updateSubmissionMessage:e.observable(""),updateSubmissionStatus:e.observable(c.b.READY),updateSubmissionStatusMessage:e.observable(""),onExecution:e.observable(c.b.READY)},execution:{reports:{},output:e.observableArray([]),input:e.observableArray([]),inputIndex:e.observable(0),student:{filename:e.observable(null),currentStep:e.observable(null),lastStep:e.observable(null),currentLine:e.observable(null),lastLine:e.observable(0),currentTraceData:e.observableArray([]),currentTraceStep:e.observable(0),results:null,globals:e.observable(null)},instructor:{globals:null,sysmodules:void 0},feedback:{message:e.observable("Ready"),category:e.observable(null),label:e.observable(null),hidden:e.observable(!1),linesError:e.observableArray([]),linesUncovered:e.observableArray([]),results:null}},configuration:{callbacks:{success:this.initialConfiguration_["callback.success"]},serverConnected:e.observable(this.getSetting("server.connected",!0)),blocklyPath:this.initialConfiguration_["blockly.path"],attachmentPoint:this.initialConfiguration_["attachment.point"],container:null,urls:this.initialConfiguration_.urls||{}}}}},{key:"initInterface",value:function(){var e=this.model.configuration,t=Object(u.c)(this);e.container=o()(e.attachmentPoint).html(o()(t))}},{key:"loadAssignment",value:function(e){this.components.server.loadAssignment(e)}},{key:"loadTags",value:function(e){}},{key:"loadSampleSubmissions",value:function(e){}},{key:"loadNoSubmission",value:function(e){this.model.submission.code(e.starting_code),Object(d.e)(e.extra_starting_files,this.model.submission.extraFiles)}},{key:"loadSubmission",value:function(e,t){if(!e)return this.loadNoSubmission(t),!1;this.model.submission.id(e.id),this.model.submission.code(e.code),this.model.submission.correct(e.correct),this.model.submission.score(e.score),this.model.submission.endpoint(e.endpoint),this.model.submission.url(e.url),this.model.submission.version(e.version),this.model.submission.gradingStatus(e.grading_status),this.model.submission.submissionStatus(e.submission_status),this.model.submission.ownerId(e.user_id),this.model.user.courseId(e.course_id),Object(d.e)(e.extra_files,this.model.submission.extraFiles)}},{key:"loadAssignmentData_",value:function(e){console.log(e),this.resetInterface(),this.components.fileSystem.dismountExtraFiles();var t=this.model.configuration.serverConnected();this.model.configuration.serverConnected(!1);var n=e.assignment;this.model.assignment.id(n.id),this.model.assignment.version(n.version),this.model.assignment.courseId(n.course_id),this.model.assignment.forkedId(n.forked_id),this.model.assignment.forkedVersion(n.forked_version),this.model.assignment.hidden(n.hidden),this.model.assignment.reviewed(n.reviewed),this.model.assignment.public(n.public),this.model.assignment.type(n.type),this.model.assignment.url(n.url),this.model.assignment.ipRanges(n.ip_ranges),this.model.assignment.instructions(n.instructions),this.model.assignment.name(n.name),this.model.assignment.onChange(n.on_change||null),n.on_change&&this.components.fileSystem.newFile("!on_change.py",n.on_change),this.model.assignment.onEval(n.on_eval||null),n.on_eval&&this.components.fileSystem.newFile("!on_eval.py",n.on_eval),this.model.assignment.onRun(n.on_run),this.model.assignment.startingCode(n.starting_code),this.model.assignment.ownerId(n.owner_id),Object(v.b)(this.model,n.settings),this.loadTags(n.tags),this.loadSampleSubmissions(n.sample_submissions),Object(d.e)(n.extra_instructor_files,this.model.assignment.extraInstructorFiles),Object(d.e)(n.extra_starting_files,this.model.assignment.extraStartingFiles),this.loadSubmission(e.submission,n),this.model.display.dirtySubmission(!0),this.model.display.changedInstructions(null),this.model.configuration.serverConnected(t),this.components.corgis.loadDatasets(!0),this.components.pythonEditor.bm.refresh(),this.components.server.setStatus("saveFile",c.b.READY)}},{key:"initModelMethods",value:function(){var t=this,n=this,i=this.model;i.ui={role:{isGrader:e.pureComputed((function(){return"owner"===i.user.role()||"grader"===i.user.role()}))},instructions:{isChanged:e.pureComputed((function(){return null!==i.display.changedInstructions()})),current:e.pureComputed((function(){return i.ui.instructions.isChanged()?n.utilities.markdown(i.display.changedInstructions()):n.utilities.markdown(i.assignment.instructions())})),reset:function(){return i.display.changedInstructions(null)}},menu:{textFullscreen:e.pureComputed((function(){return i.display.fullscreen()?"fa-compress-arrows-alt":"fa-expand-arrows-alt"})),clickFullscreen:function(){i.display.fullscreen(!i.display.fullscreen())},editInputs:function(){t.components.dialog.EDIT_INPUTS()},canMarkSubmitted:e.pureComputed((function(){return i.assignment.hidden()||i.assignment.reviewed()||i.assignment.settings.canClose()})),textMarkSubmitted:e.pureComputed((function(){return i.ui.menu.isCompleted()?i.user.groupId()?"Problem closed":"Assignment closed":i.ui.menu.isSubmitted()?"Reopen for editing":i.display.dirtySubmission()?"Run":!i.assignment.hidden()&&i.submission.correct()?"Submit":"Submit early"})),clickMarkSubmitted:function(){i.ui.menu.isCompleted()?alert("You cannot reopen closed assignments. Contact a grader!"):i.ui.menu.isSubmitted()?n.components.server.updateSubmissionStatus("inProgress"):i.display.dirtySubmission()?n.components.engine.delayedRun():n.components.server.updateSubmissionStatus("Submitted")},isSubmitted:e.pureComputed((function(){return(i.assignment.reviewed()||i.assignment.settings.canClose())&&"submitted"===i.submission.submissionStatus().toLowerCase()})),isCompleted:e.pureComputed((function(){return"completed"===i.submission.submissionStatus().toLowerCase()})),showQueuedInputs:e.pureComputed((function(){return!i.assignment.settings.hideQueuedInputs()}))},secondRow:{isAllVisible:e.pureComputed((function(){return!i.assignment.settings.hideMiddlePanel()})),isFeedbackVisible:e.pureComputed((function(){return i.display.secondRowSecondPanel()===u.a.FEEDBACK})),isTraceVisible:e.pureComputed((function(){return i.display.secondRowSecondPanel()===u.a.TRACE})),isConsoleShowVisible:e.pureComputed((function(){return i.ui.secondRow.isFeedbackVisible()||i.ui.secondRow.isTraceVisible()})),switchLabel:e.pureComputed((function(){return null!==i.execution.student.lastStep()?"View Trace":""})),advanceState:function(){var e=i.display.secondRowSecondPanel;e()===u.a.NONE?e(u.a.FEEDBACK):e()===u.a.TRACE?e(u.a.NONE):null!==i.execution.student.lastStep()?e(u.a.TRACE):e(u.a.NONE)}},console:{size:e.pureComputed((function(){return i.display.secondRowSecondPanel()===u.a.NONE?"col-md-12":"col-md-6"})),hideEvaluate:e.pureComputed((function(){return i.assignment.settings.hideEvaluate()||!i.execution.student.globals()||i.status.onExecution()===c.b.ACTIVE}))},feedback:{badge:e.pureComputed((function(){if(null===i.execution.feedback.category())return"label-none";switch(i.execution.feedback.category().toLowerCase()){default:case"none":return"label-none";case"runtime":return"label-runtime-error";case"syntax":case"editor":return"label-syntax-error";case"internal":return"label-internal-error";case"semantic":case"analyzer":return"label-semantic-error";case"feedback":case"instructor":return"label-feedback-error";case"complete":return"label-problem-complete";case"instructions":return"label-instructions";case"no errors":return"label-no-errors"}})),category:e.pureComputed((function(){if(null===i.execution.feedback.category())return"";switch(i.execution.feedback.category().toLowerCase()){default:case"none":return"";case"runtime":return"Runtime Error";case"syntax":return"Syntax Error";case"editor":return"Editor Error";case"internal":return"Internal Error";case"semantic":case"analyzer":return"Algorithm Error";case"feedback":case"instructions":return"Instructions";case"instructor":return"Incorrect Answer";case"complete":return"Complete";case"no errors":return"No errors"}}))},trace:{has:e.pureComputed((function(){return null!==i.execution.student.currentTraceData()})),line:e.pureComputed((function(){var e=i.execution.student.currentTraceStep(),t=i.execution.student.lastStep(),n=i.execution.student.currentTraceData();return n&&null!==e?0===e?"Before run":e===t?"Finished run":"Line "+(n[e].line-1):"No trace"})),first:function(){i.execution.student.currentTraceStep(0)},backward:function(){var e=Math.max(0,i.execution.student.currentTraceStep()-1);i.execution.student.currentTraceStep(e)},forward:function(){var e=Math.min(i.execution.student.lastStep(),i.execution.student.currentTraceStep()+1);i.execution.student.currentTraceStep(e)},last:function(){i.execution.student.currentTraceStep(i.execution.student.lastStep())},data:e.pureComputed((function(){var e=i.execution.student.currentTraceStep(),t=i.execution.student.lastStep(),n=i.execution.student.currentTraceData();if(!n)return[];switch(e){case 0:return[];case t:return n[e-1];default:return n[e]}}))},files:{visible:e.pureComputed((function(){return i.display.instructor()||!i.assignment.settings.hideFiles()})),hasContents:function(e){switch(e){case"answer.py":return i.submission.code();case"!instructions.md":return i.assignment.instructions();case"!on_change.py":return null!==i.assignment.onChange();case"!on_eval.py":return null!==i.assignment.onEval();case"?mock_urls.blockpy":return i.assignment.extraInstructorFiles().some((function(e){return"?mock_urls.blockpy"===e.filename()}));case"!tags.blockpy":return i.assignment.tags().length;case"!sample_submissions.blockpy":return i.assignment.sampleSubmissions().length;default:return!1}},add:function(e){switch(e){case"?mock_urls.blockpy":case"?tags.blockpy":case"?settings.blockpy":n.components.fileSystem.newFile(e);break;case"!on_change.py":i.assignment.onChange(""),n.components.fileSystem.newFile(e);break;case"!on_eval.py":i.assignment.onEval(""),n.components.fileSystem.newFile(e);break;case"instructor":return void n.components.fileSystem.newFileDialog("instructor");case"student":return void n.components.fileSystem.newFileDialog("student");case"starting":return void n.components.fileSystem.newFileDialog("starting")}i.display.filename(e)},delete:function(){return n.components.fileSystem.deleteFile(i.display.filename())},extraStudentFiles:Object(d.g)(i.submission.extraFiles),extraInstructorFiles:Object(d.g)(i.assignment.extraInstructorFiles),extraStartingFiles:Object(d.g)(i.assignment.extraStartingFiles),displayFilename:function(e){return"?mock_urls.blockpy"===e?"URL Data":e.startsWith("&")?e.slice(1):e}},editors:{current:e.pureComputed((function(){return n.components.editors.getEditor(i.display.filename())})),view:e.pureComputed((function(){return!i.display.instructor()&&i.assignment.settings.hideEditors()?"None":i.display.filename()?i.ui.editors.current():"None"})),reset:function(){n.components.server.logEvent("X-File.Reset","","","","answer.py"),i.submission.code(i.assignment.startingCode()),i.submission.extraFiles(i.assignment.extraStartingFiles().map((function(e){var t=e.filename().substr(1);return Object(d.f)(t,e.contents())})))},canSave:e.pureComputed((function(){return!i.display.autoSave()})),canDelete:e.pureComputed((function(){return(!i.assignment.settings.hideFiles()||i.display.instructor())&&-1===d.c.indexOf(i.display.filename())})),canRename:e.pureComputed((function(){return(!i.assignment.settings.hideFiles()||i.display.instructor())&&-1===d.d.indexOf(i.display.filename())})),upload:f.d.bind(n),download:f.b.bind(n),importDataset:function(){n.components.corgis.openDialog()},python:{fullscreen:function(){var e=n.components.pythonEditor.bm.textEditor.codeMirror;return e.setOption("fullScreen",!e.getOption("fullScreen"))},updateMode:function(e){n.components.server.logEvent("X-View.Change","","",e,i.display.filename()),i.display.pythonMode(e),"answer.py"===i.display.filename()&&(n.components.pythonEditor.oldPythonMode=e)},isHistoryAvailable:e.pureComputed((function(){return i.ui.server.isEndpointConnected("loadHistory")})),turnOffHistoryMode:function(){n.components.pythonEditor.updateEditor(),n.components.pythonEditor.setReadOnly(!1),i.display.historyMode(!1)},turnOnHistoryMode:function(){n.components.server.loadHistory((function(e){e.success?(n.components.history.load(e.history),i.display.historyMode(!0),n.components.pythonEditor.setReadOnly(!0)):n.components.dialog.ERROR_LOADING_HISTORY()}))},toggleHistoryMode:function(){i.display.historyMode()?i.ui.editors.python.turnOffHistoryMode():i.ui.editors.python.turnOnHistoryMode()},history:{start:function(){n.components.history.moveToStart()},previous:function(){n.components.history.movePrevious()},next:function(){n.components.history.moveNext()},mostRecent:function(){n.components.history.moveToMostRecent()},use:function(){n.components.history.use()}}},settings:{save:function(){return n.components.server.saveAssignment()}}},execute:{isRunning:e.pureComputed((function(){return i.status.onExecution()===c.b.ACTIVE})),run:function(){return n.components.engine.delayedRun()},evaluate:function(){return n.components.engine.evaluate()}},server:{status:function(e){return"server-status-"+i.status[e]()},isEndpointConnected:function(e){return i.configuration.serverConnected()&&void 0!==i.configuration.urls&&void 0!==i.configuration.urls[e]},messages:e.pureComputed((function(){return Object(S.a)(i.status.loadAssignmentMessage()||i.status.saveAssignmentMessage()||i.status.loadHistoryMessage()||i.status.loadFileMessage()||i.status.saveFileMessage()||i.status.loadDatasetMessage()||i.status.logEventMessage()||i.status.saveImage()||i.status.updateSubmissionMessage()||i.status.updateSubmissionStatusMessage()||"")})),force:{updateSubmission:function(e,t){console.log(t),n.components.server.updateSubmission(n.model.submission.score(),n.model.submission.correct(),!1,!0),o()(t.target).fadeOut(100).fadeIn(100)}}}},Object(u.b)(n,i)}},{key:"turnOnHacks",value:function(){Sk.builtinFiles.files["src/lib/image.js"]=s.a.toString()}},{key:"applyModel",value:function(){e.applyBindings(this.model)}},{key:"initUtilities",value:function(){this.utilities={markdown:function(e){return e?EasyMDE.prototype.markdown(e):"<p></p>"}}}},{key:"initComponents",value:function(){var e=this.model.configuration.container,t=this.components={};t.dialog=new y.a(this,e.find(".blockpy-dialog")),t.feedback=new b.a(this,e.find(".blockpy-feedback")),t.trace=new m.a(this),t.console=new h.a(this,e.find(".blockpy-console")),t.engine=new p.a(this),t.fileSystem=new d.a(this),t.editors=new a.b(this,e.find(".blockpy-editor")),t.pythonEditor=this.components.editors.byName("python"),t.server=new c.a(this),t.corgis=new g.a(this),t.history=new k.a(this,e.find(".blockpy-history-toolbar"))}},{key:"makeExtraSubscriptions",value:function(){var e=this;this.model.display.changedInstructions.subscribe((function(t){e.components.server.logEvent("X-Instructions.Change","","",t,"instructions.md")}))}},{key:"start",value:function(){this.model.display.filename("answer.py")}},{key:"resetInterface",value:function(){this.components.engine.reset()}},{key:"requestPasscode",value:function(){var e=prompt("Please enter the passcode.");this.model.display.passcode(e)}}])&&_(n.prototype,i),w&&_(n,w),t}()}.call(this,n(16))},function(e,t,n){},function(e,t,n){}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,